/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    CryptoTickerModel,
    CryptoTickerModelFromJSON,
    CryptoTickerModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TradeHistory,
    TradeHistoryFromJSON,
    TradeHistoryToJSON,
    TradesGroupedMonth,
    TradesGroupedMonthFromJSON,
    TradesGroupedMonthToJSON,
} from '../models';

export interface V1CryptosActualExchangeRateFromCurrencyToCurrencyGetRequest {
    fromCurrency: string;
    toCurrency: string;
}

export interface V1CryptosBrokerReportBrokerIdPostRequest {
    brokerId: number;
    file?: Blob;
}

export interface V1CryptosDeleteRequest {
    body?: number;
}

export interface V1CryptosExchangeRateFromCurrencyToCurrencyAtDateGetRequest {
    fromCurrency: string;
    toCurrency: string;
    atDate: Date;
}

export interface V1CryptosPostRequest {
    tradeHistory?: TradeHistory;
}

export interface V1CryptosPutRequest {
    tradeHistory?: TradeHistory;
}

export interface V1CryptosTradeDetailTradeIdGetRequest {
    tradeId: number;
}

/**
 * CryptoApi - interface
 * 
 * @export
 * @interface CryptoApiInterface
 */
export interface CryptoApiInterface {
    /**
     * 
     * @param {string} fromCurrency 
     * @param {string} toCurrency 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosActualExchangeRateFromCurrencyToCurrencyGetRaw(requestParameters: V1CryptosActualExchangeRateFromCurrencyToCurrencyGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>>;

    /**
     */
    v1CryptosActualExchangeRateFromCurrencyToCurrencyGet(requestParameters: V1CryptosActualExchangeRateFromCurrencyToCurrencyGetRequest, initOverrides?: RequestInit): Promise<number>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosAllGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradeHistory>>>;

    /**
     */
    v1CryptosAllGet(initOverrides?: RequestInit): Promise<Array<TradeHistory>>;

    /**
     * 
     * @param {number} brokerId 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosBrokerReportBrokerIdPostRaw(requestParameters: V1CryptosBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1CryptosBrokerReportBrokerIdPost(requestParameters: V1CryptosBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosDeleteRaw(requestParameters: V1CryptosDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1CryptosDelete(requestParameters: V1CryptosDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {string} fromCurrency 
     * @param {string} toCurrency 
     * @param {Date} atDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosExchangeRateFromCurrencyToCurrencyAtDateGetRaw(requestParameters: V1CryptosExchangeRateFromCurrencyToCurrencyAtDateGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>>;

    /**
     */
    v1CryptosExchangeRateFromCurrencyToCurrencyAtDateGet(requestParameters: V1CryptosExchangeRateFromCurrencyToCurrencyAtDateGetRequest, initOverrides?: RequestInit): Promise<number>;

    /**
     * 
     * @param {TradeHistory} [tradeHistory] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosPostRaw(requestParameters: V1CryptosPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1CryptosPost(requestParameters: V1CryptosPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {TradeHistory} [tradeHistory] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosPutRaw(requestParameters: V1CryptosPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1CryptosPut(requestParameters: V1CryptosPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosTickersGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CryptoTickerModel>>>;

    /**
     */
    v1CryptosTickersGet(initOverrides?: RequestInit): Promise<Array<CryptoTickerModel>>;

    /**
     * 
     * @param {number} tradeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosTradeDetailTradeIdGetRaw(requestParameters: V1CryptosTradeDetailTradeIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TradeHistory>>;

    /**
     */
    v1CryptosTradeDetailTradeIdGet(requestParameters: V1CryptosTradeDetailTradeIdGetRequest, initOverrides?: RequestInit): Promise<TradeHistory>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosTradeMonthlygroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>>;

    /**
     */
    v1CryptosTradeMonthlygroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosTradeTickergroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>>;

    /**
     */
    v1CryptosTradeTickergroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    v1CryptosTradeTradedategroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>>;

    /**
     */
    v1CryptosTradeTradedategroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>>;

}

/**
 * 
 */
export class CryptoApi extends runtime.BaseAPI implements CryptoApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async v1CryptosActualExchangeRateFromCurrencyToCurrencyGetRaw(requestParameters: V1CryptosActualExchangeRateFromCurrencyToCurrencyGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.fromCurrency === null || requestParameters.fromCurrency === undefined) {
            throw new runtime.RequiredError('fromCurrency','Required parameter requestParameters.fromCurrency was null or undefined when calling v1CryptosActualExchangeRateFromCurrencyToCurrencyGet.');
        }

        if (requestParameters.toCurrency === null || requestParameters.toCurrency === undefined) {
            throw new runtime.RequiredError('toCurrency','Required parameter requestParameters.toCurrency was null or undefined when calling v1CryptosActualExchangeRateFromCurrencyToCurrencyGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/cryptos/actualExchangeRate/{fromCurrency}/{toCurrency}`.replace(`{${"fromCurrency"}}`, this.processPathParam(requestParameters.fromCurrency)).replace(`{${"toCurrency"}}`, this.processPathParam(requestParameters.toCurrency)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async v1CryptosActualExchangeRateFromCurrencyToCurrencyGet(requestParameters: V1CryptosActualExchangeRateFromCurrencyToCurrencyGetRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.v1CryptosActualExchangeRateFromCurrencyToCurrencyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1CryptosAllGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradeHistory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/cryptos/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradeHistoryFromJSON));
    }

    /**
     */
    async v1CryptosAllGet(initOverrides?: RequestInit): Promise<Array<TradeHistory>> {
        const response = await this.v1CryptosAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async v1CryptosBrokerReportBrokerIdPostRaw(requestParameters: V1CryptosBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.brokerId === null || requestParameters.brokerId === undefined) {
            throw new runtime.RequiredError('brokerId','Required parameter requestParameters.brokerId was null or undefined when calling v1CryptosBrokerReportBrokerIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data; ver=1.0' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/v1/cryptos/brokerReport/{brokerId}`.replace(`{${"brokerId"}}`, this.processPathParam(requestParameters.brokerId)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1CryptosBrokerReportBrokerIdPost(requestParameters: V1CryptosBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1CryptosBrokerReportBrokerIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1CryptosDeleteRaw(requestParameters: V1CryptosDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/cryptos`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1CryptosDelete(requestParameters: V1CryptosDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1CryptosDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1CryptosExchangeRateFromCurrencyToCurrencyAtDateGetRaw(requestParameters: V1CryptosExchangeRateFromCurrencyToCurrencyAtDateGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.fromCurrency === null || requestParameters.fromCurrency === undefined) {
            throw new runtime.RequiredError('fromCurrency','Required parameter requestParameters.fromCurrency was null or undefined when calling v1CryptosExchangeRateFromCurrencyToCurrencyAtDateGet.');
        }

        if (requestParameters.toCurrency === null || requestParameters.toCurrency === undefined) {
            throw new runtime.RequiredError('toCurrency','Required parameter requestParameters.toCurrency was null or undefined when calling v1CryptosExchangeRateFromCurrencyToCurrencyAtDateGet.');
        }

        if (requestParameters.atDate === null || requestParameters.atDate === undefined) {
            throw new runtime.RequiredError('atDate','Required parameter requestParameters.atDate was null or undefined when calling v1CryptosExchangeRateFromCurrencyToCurrencyAtDateGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/cryptos/exchangeRate/{fromCurrency}/{toCurrency}/{atDate}`.replace(`{${"fromCurrency"}}`, this.processPathParam(requestParameters.fromCurrency)).replace(`{${"toCurrency"}}`, this.processPathParam(requestParameters.toCurrency)).replace(`{${"atDate"}}`, this.processPathParam(requestParameters.atDate)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async v1CryptosExchangeRateFromCurrencyToCurrencyAtDateGet(requestParameters: V1CryptosExchangeRateFromCurrencyToCurrencyAtDateGetRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.v1CryptosExchangeRateFromCurrencyToCurrencyAtDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1CryptosPostRaw(requestParameters: V1CryptosPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/cryptos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TradeHistoryToJSON(requestParameters.tradeHistory),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1CryptosPost(requestParameters: V1CryptosPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1CryptosPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1CryptosPutRaw(requestParameters: V1CryptosPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/cryptos`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TradeHistoryToJSON(requestParameters.tradeHistory),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1CryptosPut(requestParameters: V1CryptosPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1CryptosPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1CryptosTickersGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CryptoTickerModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/cryptos/tickers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CryptoTickerModelFromJSON));
    }

    /**
     */
    async v1CryptosTickersGet(initOverrides?: RequestInit): Promise<Array<CryptoTickerModel>> {
        const response = await this.v1CryptosTickersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async v1CryptosTradeDetailTradeIdGetRaw(requestParameters: V1CryptosTradeDetailTradeIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TradeHistory>> {
        if (requestParameters.tradeId === null || requestParameters.tradeId === undefined) {
            throw new runtime.RequiredError('tradeId','Required parameter requestParameters.tradeId was null or undefined when calling v1CryptosTradeDetailTradeIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/cryptos/tradeDetail/{tradeId}`.replace(`{${"tradeId"}}`, this.processPathParam(requestParameters.tradeId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeHistoryFromJSON(jsonValue));
    }

    /**
     */
    async v1CryptosTradeDetailTradeIdGet(requestParameters: V1CryptosTradeDetailTradeIdGetRequest, initOverrides?: RequestInit): Promise<TradeHistory> {
        const response = await this.v1CryptosTradeDetailTradeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1CryptosTradeMonthlygroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/cryptos/trade/monthlygrouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradesGroupedMonthFromJSON));
    }

    /**
     */
    async v1CryptosTradeMonthlygroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>> {
        const response = await this.v1CryptosTradeMonthlygroupedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async v1CryptosTradeTickergroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/cryptos/trade/tickergrouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradesGroupedMonthFromJSON));
    }

    /**
     */
    async v1CryptosTradeTickergroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>> {
        const response = await this.v1CryptosTradeTickergroupedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async v1CryptosTradeTradedategroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/cryptos/trade/tradedategrouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradesGroupedMonthFromJSON));
    }

    /**
     */
    async v1CryptosTradeTradedategroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>> {
        const response = await this.v1CryptosTradeTradedategroupedGetRaw(initOverrides);
        return await response.value();
    }

}
