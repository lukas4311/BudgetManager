/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    CryptoTickerModel,
    CryptoTickerModelFromJSON,
    CryptoTickerModelToJSON,
    TradeHistory,
    TradeHistoryFromJSON,
    TradeHistoryToJSON,
    TradesGroupedMonth,
    TradesGroupedMonthFromJSON,
    TradesGroupedMonthToJSON,
} from '../models';

export interface VversionCryptosActualExchangeRateFromCurrencyToCurrencyGetRequest {
    fromCurrency: string;
    toCurrency: string;
    version: string;
}

export interface VversionCryptosAllGetRequest {
    version: string;
}

export interface VversionCryptosBrokerReportBrokerIdPostRequest {
    brokerId: number;
    version: string;
    file?: Blob;
}

export interface VversionCryptosDeleteRequest {
    version: string;
    body?: number;
}

export interface VversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGetRequest {
    fromCurrency: string;
    toCurrency: string;
    atDate: Date;
    version: string;
}

export interface VversionCryptosPostRequest {
    version: string;
    tradeHistory?: TradeHistory;
}

export interface VversionCryptosPutRequest {
    version: string;
    tradeHistory?: TradeHistory;
}

export interface VversionCryptosTickersGetRequest {
    version: string;
}

export interface VversionCryptosTradeDetailTradeIdGetRequest {
    tradeId: number;
    version: string;
}

export interface VversionCryptosTradeMonthlygroupedGetRequest {
    version: string;
}

export interface VversionCryptosTradeTickergroupedGetRequest {
    version: string;
}

export interface VversionCryptosTradeTradedategroupedGetRequest {
    version: string;
}

/**
 * CryptoApi - interface
 * 
 * @export
 * @interface CryptoApiInterface
 */
export interface CryptoApiInterface {
    /**
     * 
     * @param {string} fromCurrency 
     * @param {string} toCurrency 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosActualExchangeRateFromCurrencyToCurrencyGetRaw(requestParameters: VversionCryptosActualExchangeRateFromCurrencyToCurrencyGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>>;

    /**
     */
    vversionCryptosActualExchangeRateFromCurrencyToCurrencyGet(requestParameters: VversionCryptosActualExchangeRateFromCurrencyToCurrencyGetRequest, initOverrides?: RequestInit): Promise<number>;

    /**
     * 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosAllGetRaw(requestParameters: VversionCryptosAllGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradeHistory>>>;

    /**
     */
    vversionCryptosAllGet(requestParameters: VversionCryptosAllGetRequest, initOverrides?: RequestInit): Promise<Array<TradeHistory>>;

    /**
     * 
     * @param {number} brokerId 
     * @param {string} version 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosBrokerReportBrokerIdPostRaw(requestParameters: VversionCryptosBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    vversionCryptosBrokerReportBrokerIdPost(requestParameters: VversionCryptosBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {string} version 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosDeleteRaw(requestParameters: VversionCryptosDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    vversionCryptosDelete(requestParameters: VversionCryptosDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {string} fromCurrency 
     * @param {string} toCurrency 
     * @param {Date} atDate 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGetRaw(requestParameters: VversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>>;

    /**
     */
    vversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGet(requestParameters: VversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGetRequest, initOverrides?: RequestInit): Promise<number>;

    /**
     * 
     * @param {string} version 
     * @param {TradeHistory} [tradeHistory] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosPostRaw(requestParameters: VversionCryptosPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    vversionCryptosPost(requestParameters: VversionCryptosPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {string} version 
     * @param {TradeHistory} [tradeHistory] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosPutRaw(requestParameters: VversionCryptosPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    vversionCryptosPut(requestParameters: VversionCryptosPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosTickersGetRaw(requestParameters: VversionCryptosTickersGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CryptoTickerModel>>>;

    /**
     */
    vversionCryptosTickersGet(requestParameters: VversionCryptosTickersGetRequest, initOverrides?: RequestInit): Promise<Array<CryptoTickerModel>>;

    /**
     * 
     * @param {number} tradeId 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosTradeDetailTradeIdGetRaw(requestParameters: VversionCryptosTradeDetailTradeIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TradeHistory>>;

    /**
     */
    vversionCryptosTradeDetailTradeIdGet(requestParameters: VversionCryptosTradeDetailTradeIdGetRequest, initOverrides?: RequestInit): Promise<TradeHistory>;

    /**
     * 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosTradeMonthlygroupedGetRaw(requestParameters: VversionCryptosTradeMonthlygroupedGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>>;

    /**
     */
    vversionCryptosTradeMonthlygroupedGet(requestParameters: VversionCryptosTradeMonthlygroupedGetRequest, initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>>;

    /**
     * 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosTradeTickergroupedGetRaw(requestParameters: VversionCryptosTradeTickergroupedGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>>;

    /**
     */
    vversionCryptosTradeTickergroupedGet(requestParameters: VversionCryptosTradeTickergroupedGetRequest, initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>>;

    /**
     * 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    vversionCryptosTradeTradedategroupedGetRaw(requestParameters: VversionCryptosTradeTradedategroupedGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>>;

    /**
     */
    vversionCryptosTradeTradedategroupedGet(requestParameters: VversionCryptosTradeTradedategroupedGetRequest, initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>>;

}

/**
 * 
 */
export class CryptoApi extends runtime.BaseAPI implements CryptoApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async vversionCryptosActualExchangeRateFromCurrencyToCurrencyGetRaw(requestParameters: VversionCryptosActualExchangeRateFromCurrencyToCurrencyGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.fromCurrency === null || requestParameters.fromCurrency === undefined) {
            throw new runtime.RequiredError('fromCurrency','Required parameter requestParameters.fromCurrency was null or undefined when calling vversionCryptosActualExchangeRateFromCurrencyToCurrencyGet.');
        }

        if (requestParameters.toCurrency === null || requestParameters.toCurrency === undefined) {
            throw new runtime.RequiredError('toCurrency','Required parameter requestParameters.toCurrency was null or undefined when calling vversionCryptosActualExchangeRateFromCurrencyToCurrencyGet.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosActualExchangeRateFromCurrencyToCurrencyGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v{version}/cryptos/actualExchangeRate/{fromCurrency}/{toCurrency}`.replace(`{${"fromCurrency"}}`, this.processPathParam(requestParameters.fromCurrency)).replace(`{${"toCurrency"}}`, this.processPathParam(requestParameters.toCurrency)).replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async vversionCryptosActualExchangeRateFromCurrencyToCurrencyGet(requestParameters: VversionCryptosActualExchangeRateFromCurrencyToCurrencyGetRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.vversionCryptosActualExchangeRateFromCurrencyToCurrencyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vversionCryptosAllGetRaw(requestParameters: VversionCryptosAllGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradeHistory>>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosAllGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v{version}/cryptos/all`.replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradeHistoryFromJSON));
    }

    /**
     */
    async vversionCryptosAllGet(requestParameters: VversionCryptosAllGetRequest, initOverrides?: RequestInit): Promise<Array<TradeHistory>> {
        const response = await this.vversionCryptosAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vversionCryptosBrokerReportBrokerIdPostRaw(requestParameters: VversionCryptosBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.brokerId === null || requestParameters.brokerId === undefined) {
            throw new runtime.RequiredError('brokerId','Required parameter requestParameters.brokerId was null or undefined when calling vversionCryptosBrokerReportBrokerIdPost.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosBrokerReportBrokerIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/v{version}/cryptos/brokerReport/{brokerId}`.replace(`{${"brokerId"}}`, this.processPathParam(requestParameters.brokerId)).replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async vversionCryptosBrokerReportBrokerIdPost(requestParameters: VversionCryptosBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.vversionCryptosBrokerReportBrokerIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async vversionCryptosDeleteRaw(requestParameters: VversionCryptosDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v{version}/cryptos`.replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async vversionCryptosDelete(requestParameters: VversionCryptosDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.vversionCryptosDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async vversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGetRaw(requestParameters: VversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.fromCurrency === null || requestParameters.fromCurrency === undefined) {
            throw new runtime.RequiredError('fromCurrency','Required parameter requestParameters.fromCurrency was null or undefined when calling vversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGet.');
        }

        if (requestParameters.toCurrency === null || requestParameters.toCurrency === undefined) {
            throw new runtime.RequiredError('toCurrency','Required parameter requestParameters.toCurrency was null or undefined when calling vversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGet.');
        }

        if (requestParameters.atDate === null || requestParameters.atDate === undefined) {
            throw new runtime.RequiredError('atDate','Required parameter requestParameters.atDate was null or undefined when calling vversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGet.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v{version}/cryptos/exchangeRate/{fromCurrency}/{toCurrency}/{atDate}`.replace(`{${"fromCurrency"}}`, this.processPathParam(requestParameters.fromCurrency)).replace(`{${"toCurrency"}}`, this.processPathParam(requestParameters.toCurrency)).replace(`{${"atDate"}}`, this.processPathParam(requestParameters.atDate)).replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async vversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGet(requestParameters: VversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGetRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.vversionCryptosExchangeRateFromCurrencyToCurrencyAtDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vversionCryptosPostRaw(requestParameters: VversionCryptosPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v{version}/cryptos`.replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TradeHistoryToJSON(requestParameters.tradeHistory),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async vversionCryptosPost(requestParameters: VversionCryptosPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.vversionCryptosPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async vversionCryptosPutRaw(requestParameters: VversionCryptosPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v{version}/cryptos`.replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TradeHistoryToJSON(requestParameters.tradeHistory),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async vversionCryptosPut(requestParameters: VversionCryptosPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.vversionCryptosPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async vversionCryptosTickersGetRaw(requestParameters: VversionCryptosTickersGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CryptoTickerModel>>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosTickersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v{version}/cryptos/tickers`.replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CryptoTickerModelFromJSON));
    }

    /**
     */
    async vversionCryptosTickersGet(requestParameters: VversionCryptosTickersGetRequest, initOverrides?: RequestInit): Promise<Array<CryptoTickerModel>> {
        const response = await this.vversionCryptosTickersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vversionCryptosTradeDetailTradeIdGetRaw(requestParameters: VversionCryptosTradeDetailTradeIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TradeHistory>> {
        if (requestParameters.tradeId === null || requestParameters.tradeId === undefined) {
            throw new runtime.RequiredError('tradeId','Required parameter requestParameters.tradeId was null or undefined when calling vversionCryptosTradeDetailTradeIdGet.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosTradeDetailTradeIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v{version}/cryptos/tradeDetail/{tradeId}`.replace(`{${"tradeId"}}`, this.processPathParam(requestParameters.tradeId)).replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeHistoryFromJSON(jsonValue));
    }

    /**
     */
    async vversionCryptosTradeDetailTradeIdGet(requestParameters: VversionCryptosTradeDetailTradeIdGetRequest, initOverrides?: RequestInit): Promise<TradeHistory> {
        const response = await this.vversionCryptosTradeDetailTradeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vversionCryptosTradeMonthlygroupedGetRaw(requestParameters: VversionCryptosTradeMonthlygroupedGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosTradeMonthlygroupedGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v{version}/cryptos/trade/monthlygrouped`.replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradesGroupedMonthFromJSON));
    }

    /**
     */
    async vversionCryptosTradeMonthlygroupedGet(requestParameters: VversionCryptosTradeMonthlygroupedGetRequest, initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>> {
        const response = await this.vversionCryptosTradeMonthlygroupedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vversionCryptosTradeTickergroupedGetRaw(requestParameters: VversionCryptosTradeTickergroupedGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosTradeTickergroupedGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v{version}/cryptos/trade/tickergrouped`.replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradesGroupedMonthFromJSON));
    }

    /**
     */
    async vversionCryptosTradeTickergroupedGet(requestParameters: VversionCryptosTradeTickergroupedGetRequest, initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>> {
        const response = await this.vversionCryptosTradeTickergroupedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vversionCryptosTradeTradedategroupedGetRaw(requestParameters: VversionCryptosTradeTradedategroupedGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling vversionCryptosTradeTradedategroupedGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v{version}/cryptos/trade/tradedategrouped`.replace(`{${"version"}}`, this.processPathParam(requestParameters.version)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradesGroupedMonthFromJSON));
    }

    /**
     */
    async vversionCryptosTradeTradedategroupedGet(requestParameters: VversionCryptosTradeTradedategroupedGetRequest, initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>> {
        const response = await this.vversionCryptosTradeTradedategroupedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
