/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.FinancialApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    StockPrice,
    StockPriceFromJSON,
    StockPriceToJSON,
} from '../models';

export interface GetStockPriceDataRequest {
    ticker?: string;
}

export interface GetStockPriceDataAtDateRequest {
    date: Date;
    ticker?: string;
}

export interface GetStockPriceDataFromDateRequest {
    from: Date;
    ticker?: string;
}

export interface GetStocksPriceDataAtDateRequest {
    date: Date;
    tickers?: Array<string>;
}

/**
 * StockEndpointsApi - interface
 * 
 * @export
 * @interface StockEndpointsApiInterface
 */
export interface StockEndpointsApiInterface {
    /**
     * 
     * @param {string} [ticker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockEndpointsApiInterface
     */
    getStockPriceDataRaw(requestParameters: GetStockPriceDataRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>>;

    /**
     */
    getStockPriceData(requestParameters: GetStockPriceDataRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>>;

    /**
     * 
     * @param {Date} date 
     * @param {string} [ticker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockEndpointsApiInterface
     */
    getStockPriceDataAtDateRaw(requestParameters: GetStockPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StockPrice>>;

    /**
     */
    getStockPriceDataAtDate(requestParameters: GetStockPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<StockPrice>;

    /**
     * 
     * @param {Date} from 
     * @param {string} [ticker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockEndpointsApiInterface
     */
    getStockPriceDataFromDateRaw(requestParameters: GetStockPriceDataFromDateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>>;

    /**
     */
    getStockPriceDataFromDate(requestParameters: GetStockPriceDataFromDateRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>>;

    /**
     * 
     * @param {Date} date 
     * @param {Array<string>} [tickers] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockEndpointsApiInterface
     */
    getStocksPriceDataAtDateRaw(requestParameters: GetStocksPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>>;

    /**
     */
    getStocksPriceDataAtDate(requestParameters: GetStocksPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>>;

}

/**
 * 
 */
export class StockEndpointsApi extends runtime.BaseAPI implements StockEndpointsApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async getStockPriceDataRaw(requestParameters: GetStockPriceDataRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stock/{ticker}/price/all`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockPriceFromJSON));
    }

    /**
     */
    async getStockPriceData(requestParameters: GetStockPriceDataRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>> {
        const response = await this.getStockPriceDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getStockPriceDataAtDateRaw(requestParameters: GetStockPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StockPrice>> {
        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling getStockPriceDataAtDate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stock/{ticker}/price/{date}`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)).replace(`{${"date"}}`, this.processPathParam(requestParameters.date)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StockPriceFromJSON(jsonValue));
    }

    /**
     */
    async getStockPriceDataAtDate(requestParameters: GetStockPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<StockPrice> {
        const response = await this.getStockPriceDataAtDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getStockPriceDataFromDateRaw(requestParameters: GetStockPriceDataFromDateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>> {
        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getStockPriceDataFromDate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stock/{ticker}/priceFrom/{from}`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)).replace(`{${"from"}}`, this.processPathParam(requestParameters.from)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockPriceFromJSON));
    }

    /**
     */
    async getStockPriceDataFromDate(requestParameters: GetStockPriceDataFromDateRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>> {
        const response = await this.getStockPriceDataFromDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getStocksPriceDataAtDateRaw(requestParameters: GetStocksPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>> {
        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling getStocksPriceDataAtDate.');
        }

        const queryParameters: any = {};

        if (requestParameters.tickers) {
            queryParameters['tickers'] = requestParameters.tickers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stocks/price/{date}`.replace(`{${"date"}}`, this.processPathParam(requestParameters.date)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockPriceFromJSON));
    }

    /**
     */
    async getStocksPriceDataAtDate(requestParameters: GetStocksPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>> {
        const response = await this.getStocksPriceDataAtDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
