/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    StockPrice,
    StockPriceFromJSON,
    StockPriceToJSON,
    StockTickerModel,
    StockTickerModelFromJSON,
    StockTickerModelToJSON,
    StockTradeHistoryGetModel,
    StockTradeHistoryGetModelFromJSON,
    StockTradeHistoryGetModelToJSON,
    StockTradeHistoryModel,
    StockTradeHistoryModelFromJSON,
    StockTradeHistoryModelToJSON,
} from '../models';

export interface StockStockTickerPriceFromGetRequest {
    ticker: string | null;
    from: Date;
}

export interface StockStockTickerPriceGetRequest {
    ticker: string | null;
}

export interface StockStockTradeHistoryDeleteRequest {
    body?: number;
}

export interface StockStockTradeHistoryPostRequest {
    stockTradeHistoryModel?: StockTradeHistoryModel;
}

export interface StockStockTradeHistoryPutRequest {
    stockTradeHistoryModel?: StockTradeHistoryModel;
}

/**
 * StockApi - interface
 * 
 * @export
 * @interface StockApiInterface
 */
export interface StockApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTickerGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTickerModel>>>;

    /**
     */
    stockStockTickerGet(initOverrides?: RequestInit): Promise<Array<StockTickerModel>>;

    /**
     * 
     * @param {string} ticker 
     * @param {Date} from 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTickerPriceFromGetRaw(requestParameters: StockStockTickerPriceFromGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>>;

    /**
     */
    stockStockTickerPriceFromGet(requestParameters: StockStockTickerPriceFromGetRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>>;

    /**
     * 
     * @param {string} ticker 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTickerPriceGetRaw(requestParameters: StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>>;

    /**
     */
    stockStockTickerPriceGet(requestParameters: StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>>;

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTradeHistoryDeleteRaw(requestParameters: StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    stockStockTradeHistoryDelete(requestParameters: StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTradeHistoryGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>>;

    /**
     */
    stockStockTradeHistoryGet(initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>>;

    /**
     * 
     * @param {StockTradeHistoryModel} [stockTradeHistoryModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTradeHistoryPostRaw(requestParameters: StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    stockStockTradeHistoryPost(requestParameters: StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {StockTradeHistoryModel} [stockTradeHistoryModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTradeHistoryPutRaw(requestParameters: StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    stockStockTradeHistoryPut(requestParameters: StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<void>;

}

/**
 * 
 */
export class StockApi extends runtime.BaseAPI implements StockApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async stockStockTickerGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTickerModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTicker`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockTickerModelFromJSON));
    }

    /**
     */
    async stockStockTickerGet(initOverrides?: RequestInit): Promise<Array<StockTickerModel>> {
        const response = await this.stockStockTickerGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async stockStockTickerPriceFromGetRaw(requestParameters: StockStockTickerPriceFromGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>> {
        if (requestParameters.ticker === null || requestParameters.ticker === undefined) {
            throw new runtime.RequiredError('ticker','Required parameter requestParameters.ticker was null or undefined when calling stockStockTickerPriceFromGet.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling stockStockTickerPriceFromGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stock/{ticker}/price/{from}`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)).replace(`{${"from"}}`, this.processPathParam(requestParameters.from)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockPriceFromJSON));
    }

    /**
     */
    async stockStockTickerPriceFromGet(requestParameters: StockStockTickerPriceFromGetRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>> {
        const response = await this.stockStockTickerPriceFromGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async stockStockTickerPriceGetRaw(requestParameters: StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>> {
        if (requestParameters.ticker === null || requestParameters.ticker === undefined) {
            throw new runtime.RequiredError('ticker','Required parameter requestParameters.ticker was null or undefined when calling stockStockTickerPriceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stock/{ticker}/price`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockPriceFromJSON));
    }

    /**
     */
    async stockStockTickerPriceGet(requestParameters: StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>> {
        const response = await this.stockStockTickerPriceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async stockStockTradeHistoryDeleteRaw(requestParameters: StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTradeHistory`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stockStockTradeHistoryDelete(requestParameters: StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.stockStockTradeHistoryDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async stockStockTradeHistoryGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTradeHistory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockTradeHistoryGetModelFromJSON));
    }

    /**
     */
    async stockStockTradeHistoryGet(initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>> {
        const response = await this.stockStockTradeHistoryGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async stockStockTradeHistoryPostRaw(requestParameters: StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTradeHistory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StockTradeHistoryModelToJSON(requestParameters.stockTradeHistoryModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stockStockTradeHistoryPost(requestParameters: StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.stockStockTradeHistoryPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async stockStockTradeHistoryPutRaw(requestParameters: StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTradeHistory`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StockTradeHistoryModelToJSON(requestParameters.stockTradeHistoryModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stockStockTradeHistoryPut(requestParameters: StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.stockStockTradeHistoryPutRaw(requestParameters, initOverrides);
    }

}
