/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    OtherInvestmentBalaceHistoryModel,
    OtherInvestmentBalaceHistoryModelFromJSON,
    OtherInvestmentBalaceHistoryModelToJSON,
    OtherInvestmentModel,
    OtherInvestmentModelFromJSON,
    OtherInvestmentModelToJSON,
    PaymentModel,
    PaymentModelFromJSON,
    PaymentModelToJSON,
} from '../models';

export interface BalanceHistoryDeleteRequest {
    body?: number;
}

export interface BalanceHistoryPutRequest {
    otherInvestmentBalaceHistoryModel?: OtherInvestmentBalaceHistoryModel;
}

export interface OtherInvestmentDeleteRequest {
    body?: number;
}

export interface OtherInvestmentIdProfitOverYearsYearsGetRequest {
    id: number;
    years: number | null;
}

export interface OtherInvestmentIdProfitOverallGetRequest {
    id: number;
}

export interface OtherInvestmentIdTagedPaymentsTagIdGetRequest {
    id: number;
    tagId: number;
}

export interface OtherInvestmentIdTagedPaymentsTagIdPostRequest {
    id: number;
    tagId: number;
}

export interface OtherInvestmentOtherInvestmentIdBalanceHistoryGetRequest {
    otherInvestmentId: number;
}

export interface OtherInvestmentOtherInvestmentIdBalanceHistoryPostRequest {
    otherInvestmentId: number;
    otherInvestmentBalaceHistoryModel?: OtherInvestmentBalaceHistoryModel;
}

export interface OtherInvestmentPostRequest {
    otherInvestmentModel?: OtherInvestmentModel;
}

export interface OtherInvestmentPutRequest {
    otherInvestmentModel?: OtherInvestmentModel;
}

/**
 * OtherInvestmentApi - interface
 * 
 * @export
 * @interface OtherInvestmentApiInterface
 */
export interface OtherInvestmentApiInterface {
    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    balanceHistoryDeleteRaw(requestParameters: BalanceHistoryDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    balanceHistoryDelete(requestParameters: BalanceHistoryDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {OtherInvestmentBalaceHistoryModel} [otherInvestmentBalaceHistoryModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    balanceHistoryPutRaw(requestParameters: BalanceHistoryPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    balanceHistoryPut(requestParameters: BalanceHistoryPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    otherInvestmentAllGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OtherInvestmentModel>>>;

    /**
     */
    otherInvestmentAllGet(initOverrides?: RequestInit): Promise<Array<OtherInvestmentModel>>;

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    otherInvestmentDeleteRaw(requestParameters: OtherInvestmentDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    otherInvestmentDelete(requestParameters: OtherInvestmentDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} id 
     * @param {number} years 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    otherInvestmentIdProfitOverYearsYearsGetRaw(requestParameters: OtherInvestmentIdProfitOverYearsYearsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>>;

    /**
     */
    otherInvestmentIdProfitOverYearsYearsGet(requestParameters: OtherInvestmentIdProfitOverYearsYearsGetRequest, initOverrides?: RequestInit): Promise<number>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    otherInvestmentIdProfitOverallGetRaw(requestParameters: OtherInvestmentIdProfitOverallGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>>;

    /**
     */
    otherInvestmentIdProfitOverallGet(requestParameters: OtherInvestmentIdProfitOverallGetRequest, initOverrides?: RequestInit): Promise<number>;

    /**
     * 
     * @param {number} id 
     * @param {number} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    otherInvestmentIdTagedPaymentsTagIdGetRaw(requestParameters: OtherInvestmentIdTagedPaymentsTagIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentModel>>>;

    /**
     */
    otherInvestmentIdTagedPaymentsTagIdGet(requestParameters: OtherInvestmentIdTagedPaymentsTagIdGetRequest, initOverrides?: RequestInit): Promise<Array<PaymentModel>>;

    /**
     * 
     * @param {number} id 
     * @param {number} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    otherInvestmentIdTagedPaymentsTagIdPostRaw(requestParameters: OtherInvestmentIdTagedPaymentsTagIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    otherInvestmentIdTagedPaymentsTagIdPost(requestParameters: OtherInvestmentIdTagedPaymentsTagIdPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} otherInvestmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    otherInvestmentOtherInvestmentIdBalanceHistoryGetRaw(requestParameters: OtherInvestmentOtherInvestmentIdBalanceHistoryGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OtherInvestmentBalaceHistoryModel>>>;

    /**
     */
    otherInvestmentOtherInvestmentIdBalanceHistoryGet(requestParameters: OtherInvestmentOtherInvestmentIdBalanceHistoryGetRequest, initOverrides?: RequestInit): Promise<Array<OtherInvestmentBalaceHistoryModel>>;

    /**
     * 
     * @param {number} otherInvestmentId 
     * @param {OtherInvestmentBalaceHistoryModel} [otherInvestmentBalaceHistoryModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    otherInvestmentOtherInvestmentIdBalanceHistoryPostRaw(requestParameters: OtherInvestmentOtherInvestmentIdBalanceHistoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    otherInvestmentOtherInvestmentIdBalanceHistoryPost(requestParameters: OtherInvestmentOtherInvestmentIdBalanceHistoryPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {OtherInvestmentModel} [otherInvestmentModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    otherInvestmentPostRaw(requestParameters: OtherInvestmentPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    otherInvestmentPost(requestParameters: OtherInvestmentPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {OtherInvestmentModel} [otherInvestmentModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    otherInvestmentPutRaw(requestParameters: OtherInvestmentPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    otherInvestmentPut(requestParameters: OtherInvestmentPutRequest, initOverrides?: RequestInit): Promise<void>;

}

/**
 * 
 */
export class OtherInvestmentApi extends runtime.BaseAPI implements OtherInvestmentApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async balanceHistoryDeleteRaw(requestParameters: BalanceHistoryDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/balanceHistory`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async balanceHistoryDelete(requestParameters: BalanceHistoryDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.balanceHistoryDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async balanceHistoryPutRaw(requestParameters: BalanceHistoryPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/balanceHistory`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OtherInvestmentBalaceHistoryModelToJSON(requestParameters.otherInvestmentBalaceHistoryModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async balanceHistoryPut(requestParameters: BalanceHistoryPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.balanceHistoryPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async otherInvestmentAllGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OtherInvestmentModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/otherInvestment/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OtherInvestmentModelFromJSON));
    }

    /**
     */
    async otherInvestmentAllGet(initOverrides?: RequestInit): Promise<Array<OtherInvestmentModel>> {
        const response = await this.otherInvestmentAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async otherInvestmentDeleteRaw(requestParameters: OtherInvestmentDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/otherInvestment`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async otherInvestmentDelete(requestParameters: OtherInvestmentDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.otherInvestmentDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async otherInvestmentIdProfitOverYearsYearsGetRaw(requestParameters: OtherInvestmentIdProfitOverYearsYearsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling otherInvestmentIdProfitOverYearsYearsGet.');
        }

        if (requestParameters.years === null || requestParameters.years === undefined) {
            throw new runtime.RequiredError('years','Required parameter requestParameters.years was null or undefined when calling otherInvestmentIdProfitOverYearsYearsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/otherInvestment/{id}/profitOverYears/{years}`.replace(`{${"id"}}`, this.processPathParam(requestParameters.id)).replace(`{${"years"}}`, this.processPathParam(requestParameters.years)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async otherInvestmentIdProfitOverYearsYearsGet(requestParameters: OtherInvestmentIdProfitOverYearsYearsGetRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.otherInvestmentIdProfitOverYearsYearsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async otherInvestmentIdProfitOverallGetRaw(requestParameters: OtherInvestmentIdProfitOverallGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling otherInvestmentIdProfitOverallGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/otherInvestment/{id}/profitOverall`.replace(`{${"id"}}`, this.processPathParam(requestParameters.id)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async otherInvestmentIdProfitOverallGet(requestParameters: OtherInvestmentIdProfitOverallGetRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.otherInvestmentIdProfitOverallGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async otherInvestmentIdTagedPaymentsTagIdGetRaw(requestParameters: OtherInvestmentIdTagedPaymentsTagIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling otherInvestmentIdTagedPaymentsTagIdGet.');
        }

        if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
            throw new runtime.RequiredError('tagId','Required parameter requestParameters.tagId was null or undefined when calling otherInvestmentIdTagedPaymentsTagIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/otherInvestment/{id}/tagedPayments/{tagId}`.replace(`{${"id"}}`, this.processPathParam(requestParameters.id)).replace(`{${"tagId"}}`, this.processPathParam(requestParameters.tagId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentModelFromJSON));
    }

    /**
     */
    async otherInvestmentIdTagedPaymentsTagIdGet(requestParameters: OtherInvestmentIdTagedPaymentsTagIdGetRequest, initOverrides?: RequestInit): Promise<Array<PaymentModel>> {
        const response = await this.otherInvestmentIdTagedPaymentsTagIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async otherInvestmentIdTagedPaymentsTagIdPostRaw(requestParameters: OtherInvestmentIdTagedPaymentsTagIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling otherInvestmentIdTagedPaymentsTagIdPost.');
        }

        if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
            throw new runtime.RequiredError('tagId','Required parameter requestParameters.tagId was null or undefined when calling otherInvestmentIdTagedPaymentsTagIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/otherInvestment/{id}/tagedPayments/{tagId}`.replace(`{${"id"}}`, this.processPathParam(requestParameters.id)).replace(`{${"tagId"}}`, this.processPathParam(requestParameters.tagId)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async otherInvestmentIdTagedPaymentsTagIdPost(requestParameters: OtherInvestmentIdTagedPaymentsTagIdPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.otherInvestmentIdTagedPaymentsTagIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async otherInvestmentOtherInvestmentIdBalanceHistoryGetRaw(requestParameters: OtherInvestmentOtherInvestmentIdBalanceHistoryGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OtherInvestmentBalaceHistoryModel>>> {
        if (requestParameters.otherInvestmentId === null || requestParameters.otherInvestmentId === undefined) {
            throw new runtime.RequiredError('otherInvestmentId','Required parameter requestParameters.otherInvestmentId was null or undefined when calling otherInvestmentOtherInvestmentIdBalanceHistoryGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/otherInvestment/{otherInvestmentId}/balanceHistory`.replace(`{${"otherInvestmentId"}}`, this.processPathParam(requestParameters.otherInvestmentId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OtherInvestmentBalaceHistoryModelFromJSON));
    }

    /**
     */
    async otherInvestmentOtherInvestmentIdBalanceHistoryGet(requestParameters: OtherInvestmentOtherInvestmentIdBalanceHistoryGetRequest, initOverrides?: RequestInit): Promise<Array<OtherInvestmentBalaceHistoryModel>> {
        const response = await this.otherInvestmentOtherInvestmentIdBalanceHistoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async otherInvestmentOtherInvestmentIdBalanceHistoryPostRaw(requestParameters: OtherInvestmentOtherInvestmentIdBalanceHistoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.otherInvestmentId === null || requestParameters.otherInvestmentId === undefined) {
            throw new runtime.RequiredError('otherInvestmentId','Required parameter requestParameters.otherInvestmentId was null or undefined when calling otherInvestmentOtherInvestmentIdBalanceHistoryPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/otherInvestment/{otherInvestmentId}/balanceHistory`.replace(`{${"otherInvestmentId"}}`, this.processPathParam(requestParameters.otherInvestmentId)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OtherInvestmentBalaceHistoryModelToJSON(requestParameters.otherInvestmentBalaceHistoryModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async otherInvestmentOtherInvestmentIdBalanceHistoryPost(requestParameters: OtherInvestmentOtherInvestmentIdBalanceHistoryPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.otherInvestmentOtherInvestmentIdBalanceHistoryPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async otherInvestmentPostRaw(requestParameters: OtherInvestmentPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/otherInvestment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OtherInvestmentModelToJSON(requestParameters.otherInvestmentModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async otherInvestmentPost(requestParameters: OtherInvestmentPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.otherInvestmentPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async otherInvestmentPutRaw(requestParameters: OtherInvestmentPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/otherInvestment`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OtherInvestmentModelToJSON(requestParameters.otherInvestmentModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async otherInvestmentPut(requestParameters: OtherInvestmentPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.otherInvestmentPutRaw(requestParameters, initOverrides);
    }

}
