/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    OtherInvestmentBalaceHistoryModel,
    OtherInvestmentBalaceHistoryModelFromJSON,
    OtherInvestmentBalaceHistoryModelToJSON,
    OtherInvestmentBalanceSummaryModel,
    OtherInvestmentBalanceSummaryModelFromJSON,
    OtherInvestmentBalanceSummaryModelToJSON,
    OtherInvestmentModel,
    OtherInvestmentModelFromJSON,
    OtherInvestmentModelToJSON,
    OtherInvestmentTagModel,
    OtherInvestmentTagModelFromJSON,
    OtherInvestmentTagModelToJSON,
    PaymentModel,
    PaymentModelFromJSON,
    PaymentModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface V1OtherInvestmentBalanceHistoryDeleteRequest {
    body?: number;
}

export interface V1OtherInvestmentBalanceHistoryPutRequest {
    otherInvestmentBalaceHistoryModel?: OtherInvestmentBalaceHistoryModel;
}

export interface V1OtherInvestmentDeleteRequest {
    body?: number;
}

export interface V1OtherInvestmentIdLinkedTagGetRequest {
    id: number;
}

export interface V1OtherInvestmentIdProfitOverYearsYearsGetRequest {
    id: number;
    years: number;
}

export interface V1OtherInvestmentIdProfitOverallGetRequest {
    id: number;
}

export interface V1OtherInvestmentIdTagedPaymentsTagIdGetRequest {
    id: number;
    tagId: number;
}

export interface V1OtherInvestmentIdTagedPaymentsTagIdPostRequest {
    id: number;
    tagId: number;
}

export interface V1OtherInvestmentOtherInvestmentIdBalanceHistoryGetRequest {
    otherInvestmentId: number;
}

export interface V1OtherInvestmentOtherInvestmentIdBalanceHistoryPostRequest {
    otherInvestmentId: number;
    otherInvestmentBalaceHistoryModel?: OtherInvestmentBalaceHistoryModel;
}

export interface V1OtherInvestmentPostRequest {
    otherInvestmentModel?: OtherInvestmentModel;
}

export interface V1OtherInvestmentPutRequest {
    otherInvestmentModel?: OtherInvestmentModel;
}

/**
 * OtherInvestmentApi - interface
 * 
 * @export
 * @interface OtherInvestmentApiInterface
 */
export interface OtherInvestmentApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentAllGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OtherInvestmentModel>>>;

    /**
     */
    v1OtherInvestmentAllGet(initOverrides?: RequestInit): Promise<Array<OtherInvestmentModel>>;

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentBalanceHistoryDeleteRaw(requestParameters: V1OtherInvestmentBalanceHistoryDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1OtherInvestmentBalanceHistoryDelete(requestParameters: V1OtherInvestmentBalanceHistoryDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {OtherInvestmentBalaceHistoryModel} [otherInvestmentBalaceHistoryModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentBalanceHistoryPutRaw(requestParameters: V1OtherInvestmentBalanceHistoryPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1OtherInvestmentBalanceHistoryPut(requestParameters: V1OtherInvestmentBalanceHistoryPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentDeleteRaw(requestParameters: V1OtherInvestmentDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1OtherInvestmentDelete(requestParameters: V1OtherInvestmentDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentIdLinkedTagGetRaw(requestParameters: V1OtherInvestmentIdLinkedTagGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OtherInvestmentTagModel>>;

    /**
     */
    v1OtherInvestmentIdLinkedTagGet(requestParameters: V1OtherInvestmentIdLinkedTagGetRequest, initOverrides?: RequestInit): Promise<OtherInvestmentTagModel>;

    /**
     * 
     * @param {number} id 
     * @param {number} years 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentIdProfitOverYearsYearsGetRaw(requestParameters: V1OtherInvestmentIdProfitOverYearsYearsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>>;

    /**
     */
    v1OtherInvestmentIdProfitOverYearsYearsGet(requestParameters: V1OtherInvestmentIdProfitOverYearsYearsGetRequest, initOverrides?: RequestInit): Promise<number>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentIdProfitOverallGetRaw(requestParameters: V1OtherInvestmentIdProfitOverallGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>>;

    /**
     */
    v1OtherInvestmentIdProfitOverallGet(requestParameters: V1OtherInvestmentIdProfitOverallGetRequest, initOverrides?: RequestInit): Promise<number>;

    /**
     * 
     * @param {number} id 
     * @param {number} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentIdTagedPaymentsTagIdGetRaw(requestParameters: V1OtherInvestmentIdTagedPaymentsTagIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentModel>>>;

    /**
     */
    v1OtherInvestmentIdTagedPaymentsTagIdGet(requestParameters: V1OtherInvestmentIdTagedPaymentsTagIdGetRequest, initOverrides?: RequestInit): Promise<Array<PaymentModel>>;

    /**
     * 
     * @param {number} id 
     * @param {number} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentIdTagedPaymentsTagIdPostRaw(requestParameters: V1OtherInvestmentIdTagedPaymentsTagIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1OtherInvestmentIdTagedPaymentsTagIdPost(requestParameters: V1OtherInvestmentIdTagedPaymentsTagIdPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentOtherInvestmentBalanceGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1OtherInvestmentOtherInvestmentBalanceGet(initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} otherInvestmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentOtherInvestmentIdBalanceHistoryGetRaw(requestParameters: V1OtherInvestmentOtherInvestmentIdBalanceHistoryGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OtherInvestmentBalaceHistoryModel>>>;

    /**
     */
    v1OtherInvestmentOtherInvestmentIdBalanceHistoryGet(requestParameters: V1OtherInvestmentOtherInvestmentIdBalanceHistoryGetRequest, initOverrides?: RequestInit): Promise<Array<OtherInvestmentBalaceHistoryModel>>;

    /**
     * 
     * @param {number} otherInvestmentId 
     * @param {OtherInvestmentBalaceHistoryModel} [otherInvestmentBalaceHistoryModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentOtherInvestmentIdBalanceHistoryPostRaw(requestParameters: V1OtherInvestmentOtherInvestmentIdBalanceHistoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1OtherInvestmentOtherInvestmentIdBalanceHistoryPost(requestParameters: V1OtherInvestmentOtherInvestmentIdBalanceHistoryPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {OtherInvestmentModel} [otherInvestmentModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentPostRaw(requestParameters: V1OtherInvestmentPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1OtherInvestmentPost(requestParameters: V1OtherInvestmentPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {OtherInvestmentModel} [otherInvestmentModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentPutRaw(requestParameters: V1OtherInvestmentPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1OtherInvestmentPut(requestParameters: V1OtherInvestmentPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherInvestmentApiInterface
     */
    v1OtherInvestmentSummaryGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<OtherInvestmentBalanceSummaryModel>>;

    /**
     */
    v1OtherInvestmentSummaryGet(initOverrides?: RequestInit): Promise<OtherInvestmentBalanceSummaryModel>;

}

/**
 * 
 */
export class OtherInvestmentApi extends runtime.BaseAPI implements OtherInvestmentApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async v1OtherInvestmentAllGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OtherInvestmentModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OtherInvestmentModelFromJSON));
    }

    /**
     */
    async v1OtherInvestmentAllGet(initOverrides?: RequestInit): Promise<Array<OtherInvestmentModel>> {
        const response = await this.v1OtherInvestmentAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async v1OtherInvestmentBalanceHistoryDeleteRaw(requestParameters: V1OtherInvestmentBalanceHistoryDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/balanceHistory`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1OtherInvestmentBalanceHistoryDelete(requestParameters: V1OtherInvestmentBalanceHistoryDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1OtherInvestmentBalanceHistoryDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1OtherInvestmentBalanceHistoryPutRaw(requestParameters: V1OtherInvestmentBalanceHistoryPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/balanceHistory`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OtherInvestmentBalaceHistoryModelToJSON(requestParameters.otherInvestmentBalaceHistoryModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1OtherInvestmentBalanceHistoryPut(requestParameters: V1OtherInvestmentBalanceHistoryPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1OtherInvestmentBalanceHistoryPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1OtherInvestmentDeleteRaw(requestParameters: V1OtherInvestmentDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1OtherInvestmentDelete(requestParameters: V1OtherInvestmentDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1OtherInvestmentDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1OtherInvestmentIdLinkedTagGetRaw(requestParameters: V1OtherInvestmentIdLinkedTagGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OtherInvestmentTagModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1OtherInvestmentIdLinkedTagGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/{id}/linkedTag`.replace(`{${"id"}}`, this.processPathParam(requestParameters.id)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OtherInvestmentTagModelFromJSON(jsonValue));
    }

    /**
     */
    async v1OtherInvestmentIdLinkedTagGet(requestParameters: V1OtherInvestmentIdLinkedTagGetRequest, initOverrides?: RequestInit): Promise<OtherInvestmentTagModel> {
        const response = await this.v1OtherInvestmentIdLinkedTagGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1OtherInvestmentIdProfitOverYearsYearsGetRaw(requestParameters: V1OtherInvestmentIdProfitOverYearsYearsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1OtherInvestmentIdProfitOverYearsYearsGet.');
        }

        if (requestParameters.years === null || requestParameters.years === undefined) {
            throw new runtime.RequiredError('years','Required parameter requestParameters.years was null or undefined when calling v1OtherInvestmentIdProfitOverYearsYearsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/{id}/profitOverYears/{years}`.replace(`{${"id"}}`, this.processPathParam(requestParameters.id)).replace(`{${"years"}}`, this.processPathParam(requestParameters.years)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async v1OtherInvestmentIdProfitOverYearsYearsGet(requestParameters: V1OtherInvestmentIdProfitOverYearsYearsGetRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.v1OtherInvestmentIdProfitOverYearsYearsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1OtherInvestmentIdProfitOverallGetRaw(requestParameters: V1OtherInvestmentIdProfitOverallGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1OtherInvestmentIdProfitOverallGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/{id}/profitOverall`.replace(`{${"id"}}`, this.processPathParam(requestParameters.id)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async v1OtherInvestmentIdProfitOverallGet(requestParameters: V1OtherInvestmentIdProfitOverallGetRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.v1OtherInvestmentIdProfitOverallGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1OtherInvestmentIdTagedPaymentsTagIdGetRaw(requestParameters: V1OtherInvestmentIdTagedPaymentsTagIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1OtherInvestmentIdTagedPaymentsTagIdGet.');
        }

        if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
            throw new runtime.RequiredError('tagId','Required parameter requestParameters.tagId was null or undefined when calling v1OtherInvestmentIdTagedPaymentsTagIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/{id}/tagedPayments/{tagId}`.replace(`{${"id"}}`, this.processPathParam(requestParameters.id)).replace(`{${"tagId"}}`, this.processPathParam(requestParameters.tagId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentModelFromJSON));
    }

    /**
     */
    async v1OtherInvestmentIdTagedPaymentsTagIdGet(requestParameters: V1OtherInvestmentIdTagedPaymentsTagIdGetRequest, initOverrides?: RequestInit): Promise<Array<PaymentModel>> {
        const response = await this.v1OtherInvestmentIdTagedPaymentsTagIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1OtherInvestmentIdTagedPaymentsTagIdPostRaw(requestParameters: V1OtherInvestmentIdTagedPaymentsTagIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1OtherInvestmentIdTagedPaymentsTagIdPost.');
        }

        if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
            throw new runtime.RequiredError('tagId','Required parameter requestParameters.tagId was null or undefined when calling v1OtherInvestmentIdTagedPaymentsTagIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/{id}/tagedPayments/{tagId}`.replace(`{${"id"}}`, this.processPathParam(requestParameters.id)).replace(`{${"tagId"}}`, this.processPathParam(requestParameters.tagId)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1OtherInvestmentIdTagedPaymentsTagIdPost(requestParameters: V1OtherInvestmentIdTagedPaymentsTagIdPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1OtherInvestmentIdTagedPaymentsTagIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1OtherInvestmentOtherInvestmentBalanceGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/otherInvestment/balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1OtherInvestmentOtherInvestmentBalanceGet(initOverrides?: RequestInit): Promise<void> {
        await this.v1OtherInvestmentOtherInvestmentBalanceGetRaw(initOverrides);
    }

    /**
     */
    async v1OtherInvestmentOtherInvestmentIdBalanceHistoryGetRaw(requestParameters: V1OtherInvestmentOtherInvestmentIdBalanceHistoryGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OtherInvestmentBalaceHistoryModel>>> {
        if (requestParameters.otherInvestmentId === null || requestParameters.otherInvestmentId === undefined) {
            throw new runtime.RequiredError('otherInvestmentId','Required parameter requestParameters.otherInvestmentId was null or undefined when calling v1OtherInvestmentOtherInvestmentIdBalanceHistoryGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/{otherInvestmentId}/balanceHistory`.replace(`{${"otherInvestmentId"}}`, this.processPathParam(requestParameters.otherInvestmentId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OtherInvestmentBalaceHistoryModelFromJSON));
    }

    /**
     */
    async v1OtherInvestmentOtherInvestmentIdBalanceHistoryGet(requestParameters: V1OtherInvestmentOtherInvestmentIdBalanceHistoryGetRequest, initOverrides?: RequestInit): Promise<Array<OtherInvestmentBalaceHistoryModel>> {
        const response = await this.v1OtherInvestmentOtherInvestmentIdBalanceHistoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1OtherInvestmentOtherInvestmentIdBalanceHistoryPostRaw(requestParameters: V1OtherInvestmentOtherInvestmentIdBalanceHistoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.otherInvestmentId === null || requestParameters.otherInvestmentId === undefined) {
            throw new runtime.RequiredError('otherInvestmentId','Required parameter requestParameters.otherInvestmentId was null or undefined when calling v1OtherInvestmentOtherInvestmentIdBalanceHistoryPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/{otherInvestmentId}/balanceHistory`.replace(`{${"otherInvestmentId"}}`, this.processPathParam(requestParameters.otherInvestmentId)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OtherInvestmentBalaceHistoryModelToJSON(requestParameters.otherInvestmentBalaceHistoryModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1OtherInvestmentOtherInvestmentIdBalanceHistoryPost(requestParameters: V1OtherInvestmentOtherInvestmentIdBalanceHistoryPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1OtherInvestmentOtherInvestmentIdBalanceHistoryPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1OtherInvestmentPostRaw(requestParameters: V1OtherInvestmentPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OtherInvestmentModelToJSON(requestParameters.otherInvestmentModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1OtherInvestmentPost(requestParameters: V1OtherInvestmentPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1OtherInvestmentPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1OtherInvestmentPutRaw(requestParameters: V1OtherInvestmentPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OtherInvestmentModelToJSON(requestParameters.otherInvestmentModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1OtherInvestmentPut(requestParameters: V1OtherInvestmentPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1OtherInvestmentPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1OtherInvestmentSummaryGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<OtherInvestmentBalanceSummaryModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/otherInvestment/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OtherInvestmentBalanceSummaryModelFromJSON(jsonValue));
    }

    /**
     */
    async v1OtherInvestmentSummaryGet(initOverrides?: RequestInit): Promise<OtherInvestmentBalanceSummaryModel> {
        const response = await this.v1OtherInvestmentSummaryGetRaw(initOverrides);
        return await response.value();
    }

}
