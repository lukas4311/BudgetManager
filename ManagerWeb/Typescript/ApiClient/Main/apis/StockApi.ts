/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    CompanyProfileModel,
    CompanyProfileModelFromJSON,
    CompanyProfileModelToJSON,
    ECurrencySymbol,
    ECurrencySymbolFromJSON,
    ECurrencySymbolToJSON,
    StockPrice,
    StockPriceFromJSON,
    StockPriceToJSON,
    StockSplitAccumulated,
    StockSplitAccumulatedFromJSON,
    StockSplitAccumulatedToJSON,
    StockTickerModel,
    StockTickerModelFromJSON,
    StockTickerModelToJSON,
    StockTradeHistoryGetModel,
    StockTradeHistoryGetModelFromJSON,
    StockTradeHistoryGetModelToJSON,
    StockTradeHistoryModel,
    StockTradeHistoryModelFromJSON,
    StockTradeHistoryModelToJSON,
    TickerRequest,
    TickerRequestFromJSON,
    TickerRequestToJSON,
    TradesGroupedMonth,
    TradesGroupedMonthFromJSON,
    TradesGroupedMonthToJSON,
} from '../models';

export interface StockBrokerReportBrokerIdPostRequest {
    brokerId: number;
    file?: Blob;
}

export interface StockStockTickerCompanyProfileGetRequest {
    ticker: string;
}

export interface StockStockTickerPriceFromGetRequest {
    ticker: string;
    from: Date;
}

export interface StockStockTickerPriceGetRequest {
    ticker: string;
}

export interface StockStockTickerTickerIdMetadataPutRequest {
    tickerId: number;
    body?: string;
}

export interface StockStockTickerTickerIdPutRequest {
    tickerId: number;
    stockTickerModel?: StockTickerModel;
}

export interface StockStockTradeHistoryDeleteRequest {
    body?: number;
}

export interface StockStockTradeHistoryExhangedToForexSymbolGetRequest {
    forexSymbol: ECurrencySymbol;
}

export interface StockStockTradeHistoryPostRequest {
    stockTradeHistoryModel?: StockTradeHistoryModel;
}

export interface StockStockTradeHistoryPutRequest {
    stockTradeHistoryModel?: StockTradeHistoryModel;
}

export interface StockStockTradeHistoryTickerGetRequest {
    ticker: string;
}

export interface StockTickerRequestPostRequest {
    tickerRequest?: TickerRequest;
}

/**
 * StockApi - interface
 * 
 * @export
 * @interface StockApiInterface
 */
export interface StockApiInterface {
    /**
     * 
     * @param {number} brokerId 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockBrokerReportBrokerIdPostRaw(requestParameters: StockBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    stockBrokerReportBrokerIdPost(requestParameters: StockBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockSplitGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockSplitAccumulated>>>;

    /**
     */
    stockSplitGet(initOverrides?: RequestInit): Promise<Array<StockSplitAccumulated>>;

    /**
     * 
     * @param {string} ticker 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTickerCompanyProfileGetRaw(requestParameters: StockStockTickerCompanyProfileGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CompanyProfileModel>>;

    /**
     */
    stockStockTickerCompanyProfileGet(requestParameters: StockStockTickerCompanyProfileGetRequest, initOverrides?: RequestInit): Promise<CompanyProfileModel>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTickerGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTickerModel>>>;

    /**
     */
    stockStockTickerGet(initOverrides?: RequestInit): Promise<Array<StockTickerModel>>;

    /**
     * 
     * @param {string} ticker 
     * @param {Date} from 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTickerPriceFromGetRaw(requestParameters: StockStockTickerPriceFromGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>>;

    /**
     */
    stockStockTickerPriceFromGet(requestParameters: StockStockTickerPriceFromGetRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>>;

    /**
     * 
     * @param {string} ticker 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTickerPriceGetRaw(requestParameters: StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>>;

    /**
     */
    stockStockTickerPriceGet(requestParameters: StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>>;

    /**
     * 
     * @param {number} tickerId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTickerTickerIdMetadataPutRaw(requestParameters: StockStockTickerTickerIdMetadataPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    stockStockTickerTickerIdMetadataPut(requestParameters: StockStockTickerTickerIdMetadataPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} tickerId 
     * @param {StockTickerModel} [stockTickerModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTickerTickerIdPutRaw(requestParameters: StockStockTickerTickerIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    stockStockTickerTickerIdPut(requestParameters: StockStockTickerTickerIdPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTradeHistoryDeleteRaw(requestParameters: StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    stockStockTradeHistoryDelete(requestParameters: StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {ECurrencySymbol} forexSymbol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTradeHistoryExhangedToForexSymbolGetRaw(requestParameters: StockStockTradeHistoryExhangedToForexSymbolGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>>;

    /**
     */
    stockStockTradeHistoryExhangedToForexSymbolGet(requestParameters: StockStockTradeHistoryExhangedToForexSymbolGetRequest, initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTradeHistoryGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>>;

    /**
     */
    stockStockTradeHistoryGet(initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>>;

    /**
     * 
     * @param {StockTradeHistoryModel} [stockTradeHistoryModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTradeHistoryPostRaw(requestParameters: StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    stockStockTradeHistoryPost(requestParameters: StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {StockTradeHistoryModel} [stockTradeHistoryModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTradeHistoryPutRaw(requestParameters: StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    stockStockTradeHistoryPut(requestParameters: StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {string} ticker 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockStockTradeHistoryTickerGetRaw(requestParameters: StockStockTradeHistoryTickerGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>>;

    /**
     */
    stockStockTradeHistoryTickerGet(requestParameters: StockStockTradeHistoryTickerGetRequest, initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>>;

    /**
     * 
     * @param {TickerRequest} [tickerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockTickerRequestPostRaw(requestParameters: StockTickerRequestPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    stockTickerRequestPost(requestParameters: StockTickerRequestPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockTradeMonthlygroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>>;

    /**
     */
    stockTradeMonthlygroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockTradeTickergroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>>;

    /**
     */
    stockTradeTickergroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    stockTradeTradedategroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>>;

    /**
     */
    stockTradeTradedategroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>>;

}

/**
 * 
 */
export class StockApi extends runtime.BaseAPI implements StockApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async stockBrokerReportBrokerIdPostRaw(requestParameters: StockBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.brokerId === null || requestParameters.brokerId === undefined) {
            throw new runtime.RequiredError('brokerId','Required parameter requestParameters.brokerId was null or undefined when calling stockBrokerReportBrokerIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/stock/brokerReport/{brokerId}`.replace(`{${"brokerId"}}`, this.processPathParam(requestParameters.brokerId)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stockBrokerReportBrokerIdPost(requestParameters: StockBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.stockBrokerReportBrokerIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async stockSplitGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockSplitAccumulated>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/split`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockSplitAccumulatedFromJSON));
    }

    /**
     */
    async stockSplitGet(initOverrides?: RequestInit): Promise<Array<StockSplitAccumulated>> {
        const response = await this.stockSplitGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async stockStockTickerCompanyProfileGetRaw(requestParameters: StockStockTickerCompanyProfileGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CompanyProfileModel>> {
        if (requestParameters.ticker === null || requestParameters.ticker === undefined) {
            throw new runtime.RequiredError('ticker','Required parameter requestParameters.ticker was null or undefined when calling stockStockTickerCompanyProfileGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stock/{ticker}/companyProfile`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyProfileModelFromJSON(jsonValue));
    }

    /**
     */
    async stockStockTickerCompanyProfileGet(requestParameters: StockStockTickerCompanyProfileGetRequest, initOverrides?: RequestInit): Promise<CompanyProfileModel> {
        const response = await this.stockStockTickerCompanyProfileGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async stockStockTickerGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTickerModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTicker`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockTickerModelFromJSON));
    }

    /**
     */
    async stockStockTickerGet(initOverrides?: RequestInit): Promise<Array<StockTickerModel>> {
        const response = await this.stockStockTickerGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async stockStockTickerPriceFromGetRaw(requestParameters: StockStockTickerPriceFromGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>> {
        if (requestParameters.ticker === null || requestParameters.ticker === undefined) {
            throw new runtime.RequiredError('ticker','Required parameter requestParameters.ticker was null or undefined when calling stockStockTickerPriceFromGet.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling stockStockTickerPriceFromGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stock/{ticker}/price/{from}`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)).replace(`{${"from"}}`, this.processPathParam(requestParameters.from)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockPriceFromJSON));
    }

    /**
     */
    async stockStockTickerPriceFromGet(requestParameters: StockStockTickerPriceFromGetRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>> {
        const response = await this.stockStockTickerPriceFromGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async stockStockTickerPriceGetRaw(requestParameters: StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>> {
        if (requestParameters.ticker === null || requestParameters.ticker === undefined) {
            throw new runtime.RequiredError('ticker','Required parameter requestParameters.ticker was null or undefined when calling stockStockTickerPriceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stock/{ticker}/price`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockPriceFromJSON));
    }

    /**
     */
    async stockStockTickerPriceGet(requestParameters: StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>> {
        const response = await this.stockStockTickerPriceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async stockStockTickerTickerIdMetadataPutRaw(requestParameters: StockStockTickerTickerIdMetadataPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tickerId === null || requestParameters.tickerId === undefined) {
            throw new runtime.RequiredError('tickerId','Required parameter requestParameters.tickerId was null or undefined when calling stockStockTickerTickerIdMetadataPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTicker/{tickerId}/metadata`.replace(`{${"tickerId"}}`, this.processPathParam(requestParameters.tickerId)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stockStockTickerTickerIdMetadataPut(requestParameters: StockStockTickerTickerIdMetadataPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.stockStockTickerTickerIdMetadataPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async stockStockTickerTickerIdPutRaw(requestParameters: StockStockTickerTickerIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tickerId === null || requestParameters.tickerId === undefined) {
            throw new runtime.RequiredError('tickerId','Required parameter requestParameters.tickerId was null or undefined when calling stockStockTickerTickerIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTicker/{tickerId}`.replace(`{${"tickerId"}}`, this.processPathParam(requestParameters.tickerId)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StockTickerModelToJSON(requestParameters.stockTickerModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stockStockTickerTickerIdPut(requestParameters: StockStockTickerTickerIdPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.stockStockTickerTickerIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async stockStockTradeHistoryDeleteRaw(requestParameters: StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTradeHistory`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stockStockTradeHistoryDelete(requestParameters: StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.stockStockTradeHistoryDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async stockStockTradeHistoryExhangedToForexSymbolGetRaw(requestParameters: StockStockTradeHistoryExhangedToForexSymbolGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>> {
        if (requestParameters.forexSymbol === null || requestParameters.forexSymbol === undefined) {
            throw new runtime.RequiredError('forexSymbol','Required parameter requestParameters.forexSymbol was null or undefined when calling stockStockTradeHistoryExhangedToForexSymbolGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTradeHistory/exhangedTo/{forexSymbol}`.replace(`{${"forexSymbol"}}`, this.processPathParam(requestParameters.forexSymbol)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockTradeHistoryGetModelFromJSON));
    }

    /**
     */
    async stockStockTradeHistoryExhangedToForexSymbolGet(requestParameters: StockStockTradeHistoryExhangedToForexSymbolGetRequest, initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>> {
        const response = await this.stockStockTradeHistoryExhangedToForexSymbolGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async stockStockTradeHistoryGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTradeHistory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockTradeHistoryGetModelFromJSON));
    }

    /**
     */
    async stockStockTradeHistoryGet(initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>> {
        const response = await this.stockStockTradeHistoryGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async stockStockTradeHistoryPostRaw(requestParameters: StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTradeHistory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StockTradeHistoryModelToJSON(requestParameters.stockTradeHistoryModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stockStockTradeHistoryPost(requestParameters: StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.stockStockTradeHistoryPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async stockStockTradeHistoryPutRaw(requestParameters: StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTradeHistory`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StockTradeHistoryModelToJSON(requestParameters.stockTradeHistoryModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stockStockTradeHistoryPut(requestParameters: StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.stockStockTradeHistoryPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async stockStockTradeHistoryTickerGetRaw(requestParameters: StockStockTradeHistoryTickerGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>> {
        if (requestParameters.ticker === null || requestParameters.ticker === undefined) {
            throw new runtime.RequiredError('ticker','Required parameter requestParameters.ticker was null or undefined when calling stockStockTradeHistoryTickerGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/stockTradeHistory/{ticker}`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockTradeHistoryGetModelFromJSON));
    }

    /**
     */
    async stockStockTradeHistoryTickerGet(requestParameters: StockStockTradeHistoryTickerGetRequest, initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>> {
        const response = await this.stockStockTradeHistoryTickerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async stockTickerRequestPostRaw(requestParameters: StockTickerRequestPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/tickerRequest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TickerRequestToJSON(requestParameters.tickerRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stockTickerRequestPost(requestParameters: StockTickerRequestPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.stockTickerRequestPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async stockTradeMonthlygroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/trade/monthlygrouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradesGroupedMonthFromJSON));
    }

    /**
     */
    async stockTradeMonthlygroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>> {
        const response = await this.stockTradeMonthlygroupedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async stockTradeTickergroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/trade/tickergrouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradesGroupedMonthFromJSON));
    }

    /**
     */
    async stockTradeTickergroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>> {
        const response = await this.stockTradeTickergroupedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async stockTradeTradedategroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stock/trade/tradedategrouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradesGroupedMonthFromJSON));
    }

    /**
     */
    async stockTradeTradedategroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>> {
        const response = await this.stockTradeTradedategroupedGetRaw(initOverrides);
        return await response.value();
    }

}
