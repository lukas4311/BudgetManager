/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    CompanyProfileModel,
    CompanyProfileModelFromJSON,
    CompanyProfileModelToJSON,
    ECurrencySymbol,
    ECurrencySymbolFromJSON,
    ECurrencySymbolToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    StockPrice,
    StockPriceFromJSON,
    StockPriceToJSON,
    StockTickerModel,
    StockTickerModelFromJSON,
    StockTickerModelToJSON,
    StockTradeHistoryGetModel,
    StockTradeHistoryGetModelFromJSON,
    StockTradeHistoryGetModelToJSON,
    StockTradeHistoryModel,
    StockTradeHistoryModelFromJSON,
    StockTradeHistoryModelToJSON,
    TickerRequest,
    TickerRequestFromJSON,
    TickerRequestToJSON,
    TradeGroupedTicker,
    TradeGroupedTickerFromJSON,
    TradeGroupedTickerToJSON,
    TradeGroupedTradeTime,
    TradeGroupedTradeTimeFromJSON,
    TradeGroupedTradeTimeToJSON,
    TradesGroupedMonth,
    TradesGroupedMonthFromJSON,
    TradesGroupedMonthToJSON,
} from '../models';

export interface V1StockBrokerReportBrokerIdPostRequest {
    brokerId: number;
    file?: Blob;
}

export interface V1StockStockTickerCompanyProfileGetRequest {
    ticker: string;
}

export interface V1StockStockTickerPriceGetRequest {
    ticker: string;
}

export interface V1StockStockTickerTickerIdMetadataPutRequest {
    tickerId: number;
    body?: string;
}

export interface V1StockStockTickerTickerIdPutRequest {
    tickerId: number;
    stockTickerModel?: StockTickerModel;
}

export interface V1StockStockTradeHistoryDeleteRequest {
    body?: number;
}

export interface V1StockStockTradeHistoryExhangedToForexSymbolGetRequest {
    forexSymbol: ECurrencySymbol;
}

export interface V1StockStockTradeHistoryPostRequest {
    stockTradeHistoryModel?: StockTradeHistoryModel;
}

export interface V1StockStockTradeHistoryPutRequest {
    stockTradeHistoryModel?: StockTradeHistoryModel;
}

export interface V1StockStockTradeHistoryTickerGetRequest {
    ticker: string;
}

export interface V1StockTickerRequestPostRequest {
    tickerRequest?: TickerRequest;
}

/**
 * StockApi - interface
 * 
 * @export
 * @interface StockApiInterface
 */
export interface StockApiInterface {
    /**
     * 
     * @param {number} brokerId 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockBrokerReportBrokerIdPostRaw(requestParameters: V1StockBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1StockBrokerReportBrokerIdPost(requestParameters: V1StockBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {string} ticker 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockStockTickerCompanyProfileGetRaw(requestParameters: V1StockStockTickerCompanyProfileGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CompanyProfileModel>>;

    /**
     */
    v1StockStockTickerCompanyProfileGet(requestParameters: V1StockStockTickerCompanyProfileGetRequest, initOverrides?: RequestInit): Promise<CompanyProfileModel>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockStockTickerGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTickerModel>>>;

    /**
     */
    v1StockStockTickerGet(initOverrides?: RequestInit): Promise<Array<StockTickerModel>>;

    /**
     * 
     * @param {string} ticker 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockStockTickerPriceGetRaw(requestParameters: V1StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>>;

    /**
     */
    v1StockStockTickerPriceGet(requestParameters: V1StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>>;

    /**
     * 
     * @param {number} tickerId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockStockTickerTickerIdMetadataPutRaw(requestParameters: V1StockStockTickerTickerIdMetadataPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1StockStockTickerTickerIdMetadataPut(requestParameters: V1StockStockTickerTickerIdMetadataPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} tickerId 
     * @param {StockTickerModel} [stockTickerModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockStockTickerTickerIdPutRaw(requestParameters: V1StockStockTickerTickerIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1StockStockTickerTickerIdPut(requestParameters: V1StockStockTickerTickerIdPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockStockTradeHistoryDeleteRaw(requestParameters: V1StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1StockStockTradeHistoryDelete(requestParameters: V1StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {ECurrencySymbol} forexSymbol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockStockTradeHistoryExhangedToForexSymbolGetRaw(requestParameters: V1StockStockTradeHistoryExhangedToForexSymbolGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>>;

    /**
     */
    v1StockStockTradeHistoryExhangedToForexSymbolGet(requestParameters: V1StockStockTradeHistoryExhangedToForexSymbolGetRequest, initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockStockTradeHistoryGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>>;

    /**
     */
    v1StockStockTradeHistoryGet(initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>>;

    /**
     * 
     * @param {StockTradeHistoryModel} [stockTradeHistoryModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockStockTradeHistoryPostRaw(requestParameters: V1StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1StockStockTradeHistoryPost(requestParameters: V1StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {StockTradeHistoryModel} [stockTradeHistoryModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockStockTradeHistoryPutRaw(requestParameters: V1StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1StockStockTradeHistoryPut(requestParameters: V1StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {string} ticker 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockStockTradeHistoryTickerGetRaw(requestParameters: V1StockStockTradeHistoryTickerGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>>;

    /**
     */
    v1StockStockTradeHistoryTickerGet(requestParameters: V1StockStockTradeHistoryTickerGetRequest, initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>>;

    /**
     * 
     * @param {TickerRequest} [tickerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockTickerRequestPostRaw(requestParameters: V1StockTickerRequestPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1StockTickerRequestPost(requestParameters: V1StockTickerRequestPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockTradeMonthlygroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>>;

    /**
     */
    v1StockTradeMonthlygroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockTradeTickergroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradeGroupedTicker>>>;

    /**
     */
    v1StockTradeTickergroupedGet(initOverrides?: RequestInit): Promise<Array<TradeGroupedTicker>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApiInterface
     */
    v1StockTradeTradedategroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradeGroupedTradeTime>>>;

    /**
     */
    v1StockTradeTradedategroupedGet(initOverrides?: RequestInit): Promise<Array<TradeGroupedTradeTime>>;

}

/**
 * 
 */
export class StockApi extends runtime.BaseAPI implements StockApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async v1StockBrokerReportBrokerIdPostRaw(requestParameters: V1StockBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.brokerId === null || requestParameters.brokerId === undefined) {
            throw new runtime.RequiredError('brokerId','Required parameter requestParameters.brokerId was null or undefined when calling v1StockBrokerReportBrokerIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/v1/stock/brokerReport/{brokerId}`.replace(`{${"brokerId"}}`, this.processPathParam(requestParameters.brokerId)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1StockBrokerReportBrokerIdPost(requestParameters: V1StockBrokerReportBrokerIdPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1StockBrokerReportBrokerIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1StockStockTickerCompanyProfileGetRaw(requestParameters: V1StockStockTickerCompanyProfileGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CompanyProfileModel>> {
        if (requestParameters.ticker === null || requestParameters.ticker === undefined) {
            throw new runtime.RequiredError('ticker','Required parameter requestParameters.ticker was null or undefined when calling v1StockStockTickerCompanyProfileGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/stock/{ticker}/companyProfile`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyProfileModelFromJSON(jsonValue));
    }

    /**
     */
    async v1StockStockTickerCompanyProfileGet(requestParameters: V1StockStockTickerCompanyProfileGetRequest, initOverrides?: RequestInit): Promise<CompanyProfileModel> {
        const response = await this.v1StockStockTickerCompanyProfileGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1StockStockTickerGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTickerModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/stockTicker`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockTickerModelFromJSON));
    }

    /**
     */
    async v1StockStockTickerGet(initOverrides?: RequestInit): Promise<Array<StockTickerModel>> {
        const response = await this.v1StockStockTickerGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async v1StockStockTickerPriceGetRaw(requestParameters: V1StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockPrice>>> {
        if (requestParameters.ticker === null || requestParameters.ticker === undefined) {
            throw new runtime.RequiredError('ticker','Required parameter requestParameters.ticker was null or undefined when calling v1StockStockTickerPriceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/stock/{ticker}/price`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockPriceFromJSON));
    }

    /**
     */
    async v1StockStockTickerPriceGet(requestParameters: V1StockStockTickerPriceGetRequest, initOverrides?: RequestInit): Promise<Array<StockPrice>> {
        const response = await this.v1StockStockTickerPriceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1StockStockTickerTickerIdMetadataPutRaw(requestParameters: V1StockStockTickerTickerIdMetadataPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tickerId === null || requestParameters.tickerId === undefined) {
            throw new runtime.RequiredError('tickerId','Required parameter requestParameters.tickerId was null or undefined when calling v1StockStockTickerTickerIdMetadataPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/stockTicker/{tickerId}/metadata`.replace(`{${"tickerId"}}`, this.processPathParam(requestParameters.tickerId)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1StockStockTickerTickerIdMetadataPut(requestParameters: V1StockStockTickerTickerIdMetadataPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1StockStockTickerTickerIdMetadataPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1StockStockTickerTickerIdPutRaw(requestParameters: V1StockStockTickerTickerIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tickerId === null || requestParameters.tickerId === undefined) {
            throw new runtime.RequiredError('tickerId','Required parameter requestParameters.tickerId was null or undefined when calling v1StockStockTickerTickerIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/stockTicker/{tickerId}`.replace(`{${"tickerId"}}`, this.processPathParam(requestParameters.tickerId)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StockTickerModelToJSON(requestParameters.stockTickerModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1StockStockTickerTickerIdPut(requestParameters: V1StockStockTickerTickerIdPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1StockStockTickerTickerIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1StockStockTradeHistoryDeleteRaw(requestParameters: V1StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/stockTradeHistory`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1StockStockTradeHistoryDelete(requestParameters: V1StockStockTradeHistoryDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1StockStockTradeHistoryDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1StockStockTradeHistoryExhangedToForexSymbolGetRaw(requestParameters: V1StockStockTradeHistoryExhangedToForexSymbolGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>> {
        if (requestParameters.forexSymbol === null || requestParameters.forexSymbol === undefined) {
            throw new runtime.RequiredError('forexSymbol','Required parameter requestParameters.forexSymbol was null or undefined when calling v1StockStockTradeHistoryExhangedToForexSymbolGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/stockTradeHistory/exhangedTo/{forexSymbol}`.replace(`{${"forexSymbol"}}`, this.processPathParam(requestParameters.forexSymbol)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockTradeHistoryGetModelFromJSON));
    }

    /**
     */
    async v1StockStockTradeHistoryExhangedToForexSymbolGet(requestParameters: V1StockStockTradeHistoryExhangedToForexSymbolGetRequest, initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>> {
        const response = await this.v1StockStockTradeHistoryExhangedToForexSymbolGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1StockStockTradeHistoryGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/stockTradeHistory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockTradeHistoryGetModelFromJSON));
    }

    /**
     */
    async v1StockStockTradeHistoryGet(initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>> {
        const response = await this.v1StockStockTradeHistoryGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async v1StockStockTradeHistoryPostRaw(requestParameters: V1StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/stockTradeHistory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StockTradeHistoryModelToJSON(requestParameters.stockTradeHistoryModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1StockStockTradeHistoryPost(requestParameters: V1StockStockTradeHistoryPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1StockStockTradeHistoryPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1StockStockTradeHistoryPutRaw(requestParameters: V1StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/stockTradeHistory`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StockTradeHistoryModelToJSON(requestParameters.stockTradeHistoryModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1StockStockTradeHistoryPut(requestParameters: V1StockStockTradeHistoryPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1StockStockTradeHistoryPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1StockStockTradeHistoryTickerGetRaw(requestParameters: V1StockStockTradeHistoryTickerGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StockTradeHistoryGetModel>>> {
        if (requestParameters.ticker === null || requestParameters.ticker === undefined) {
            throw new runtime.RequiredError('ticker','Required parameter requestParameters.ticker was null or undefined when calling v1StockStockTradeHistoryTickerGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/stockTradeHistory/{ticker}`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StockTradeHistoryGetModelFromJSON));
    }

    /**
     */
    async v1StockStockTradeHistoryTickerGet(requestParameters: V1StockStockTradeHistoryTickerGetRequest, initOverrides?: RequestInit): Promise<Array<StockTradeHistoryGetModel>> {
        const response = await this.v1StockStockTradeHistoryTickerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1StockTickerRequestPostRaw(requestParameters: V1StockTickerRequestPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/tickerRequest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TickerRequestToJSON(requestParameters.tickerRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1StockTickerRequestPost(requestParameters: V1StockTickerRequestPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1StockTickerRequestPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1StockTradeMonthlygroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradesGroupedMonth>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/trade/monthlygrouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradesGroupedMonthFromJSON));
    }

    /**
     */
    async v1StockTradeMonthlygroupedGet(initOverrides?: RequestInit): Promise<Array<TradesGroupedMonth>> {
        const response = await this.v1StockTradeMonthlygroupedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async v1StockTradeTickergroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradeGroupedTicker>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/trade/tickergrouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradeGroupedTickerFromJSON));
    }

    /**
     */
    async v1StockTradeTickergroupedGet(initOverrides?: RequestInit): Promise<Array<TradeGroupedTicker>> {
        const response = await this.v1StockTradeTickergroupedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async v1StockTradeTradedategroupedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TradeGroupedTradeTime>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/stock/trade/tradedategrouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradeGroupedTradeTimeFromJSON));
    }

    /**
     */
    async v1StockTradeTradedategroupedGet(initOverrides?: RequestInit): Promise<Array<TradeGroupedTradeTime>> {
        const response = await this.v1StockTradeTradedategroupedGetRaw(initOverrides);
        return await response.value();
    }

}
