/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    NotificationModel,
    NotificationModelFromJSON,
    NotificationModelToJSON,
} from '../models';

export interface NotificationIdMarkAsDisplayedPutRequest {
    notificationId: number;
}

export interface NotificationPostRequest {
    notificationModel?: NotificationModel;
}

/**
 * NotificationApi - interface
 * 
 * @export
 * @interface NotificationApiInterface
 */
export interface NotificationApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<NotificationModel>>>;

    /**
     */
    notificationGet(initOverrides?: RequestInit): Promise<Array<NotificationModel>>;

    /**
     * 
     * @param {number} notificationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationIdMarkAsDisplayedPutRaw(requestParameters: NotificationIdMarkAsDisplayedPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    notificationIdMarkAsDisplayedPut(requestParameters: NotificationIdMarkAsDisplayedPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {NotificationModel} [notificationModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationPostRaw(requestParameters: NotificationPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    notificationPost(requestParameters: NotificationPostRequest, initOverrides?: RequestInit): Promise<void>;

}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI implements NotificationApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async notificationGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<NotificationModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/notification`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotificationModelFromJSON));
    }

    /**
     */
    async notificationGet(initOverrides?: RequestInit): Promise<Array<NotificationModel>> {
        const response = await this.notificationGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async notificationIdMarkAsDisplayedPutRaw(requestParameters: NotificationIdMarkAsDisplayedPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling notificationIdMarkAsDisplayedPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/{notificationId}/markAsDisplayed`.replace(`{${"notificationId"}}`, this.processPathParam(requestParameters.notificationId)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationIdMarkAsDisplayedPut(requestParameters: NotificationIdMarkAsDisplayedPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.notificationIdMarkAsDisplayedPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationPostRaw(requestParameters: NotificationPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/notification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationModelToJSON(requestParameters.notificationModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationPost(requestParameters: NotificationPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.notificationPostRaw(requestParameters, initOverrides);
    }

}
