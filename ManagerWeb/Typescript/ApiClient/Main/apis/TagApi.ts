/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    AddTagModel,
    AddTagModelFromJSON,
    AddTagModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TagModel,
    TagModelFromJSON,
    TagModelToJSON,
} from '../models';

export interface V1TagsDeleteRequest {
    tagId?: number;
}

export interface V1TagsPostRequest {
    addTagModel?: AddTagModel;
}

/**
 * TagApi - interface
 * 
 * @export
 * @interface TagApiInterface
 */
export interface TagApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    v1TagsAllUsedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TagModel>>>;

    /**
     */
    v1TagsAllUsedGet(initOverrides?: RequestInit): Promise<Array<TagModel>>;

    /**
     * 
     * @param {number} [tagId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    v1TagsDeleteRaw(requestParameters: V1TagsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1TagsDelete(requestParameters: V1TagsDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {AddTagModel} [addTagModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    v1TagsPostRaw(requestParameters: V1TagsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1TagsPost(requestParameters: V1TagsPostRequest, initOverrides?: RequestInit): Promise<void>;

}

/**
 * 
 */
export class TagApi extends runtime.BaseAPI implements TagApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async v1TagsAllUsedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TagModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/tags/allUsed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagModelFromJSON));
    }

    /**
     */
    async v1TagsAllUsedGet(initOverrides?: RequestInit): Promise<Array<TagModel>> {
        const response = await this.v1TagsAllUsedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async v1TagsDeleteRaw(requestParameters: V1TagsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.tagId !== undefined) {
            queryParameters['tagId'] = requestParameters.tagId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/tags`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1TagsDelete(requestParameters: V1TagsDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1TagsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1TagsPostRaw(requestParameters: V1TagsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTagModelToJSON(requestParameters.addTagModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1TagsPost(requestParameters: V1TagsPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1TagsPostRaw(requestParameters, initOverrides);
    }

}
