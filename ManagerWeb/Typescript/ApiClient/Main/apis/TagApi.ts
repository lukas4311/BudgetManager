/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    AddTagModel,
    AddTagModelFromJSON,
    AddTagModelToJSON,
    TagModel,
    TagModelFromJSON,
    TagModelToJSON,
} from '../models';

export interface TagsDeleteRequest {
    tagId?: number;
}

export interface TagsPostRequest {
    addTagModel?: AddTagModel;
}

/**
 * TagApi - interface
 * 
 * @export
 * @interface TagApiInterface
 */
export interface TagApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    tagsAllUsedGetRaw(): Promise<runtime.ApiResponse<Array<TagModel>>>;

    /**
     */
    tagsAllUsedGet(): Promise<Array<TagModel>>;

    /**
     * 
     * @param {number} [tagId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    tagsDeleteRaw(requestParameters: TagsDeleteRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    tagsDelete(requestParameters: TagsDeleteRequest): Promise<void>;

    /**
     * 
     * @param {AddTagModel} [addTagModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    tagsPostRaw(requestParameters: TagsPostRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    tagsPost(requestParameters: TagsPostRequest): Promise<void>;

}

/**
 * 
 */
export class TagApi extends runtime.BaseAPI implements TagApiInterface {

    /**
     */
    async tagsAllUsedGetRaw(): Promise<runtime.ApiResponse<Array<TagModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/tags/allUsed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagModelFromJSON));
    }

    /**
     */
    async tagsAllUsedGet(): Promise<Array<TagModel>> {
        const response = await this.tagsAllUsedGetRaw();
        return await response.value();
    }

    /**
     */
    async tagsDeleteRaw(requestParameters: TagsDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.tagId !== undefined) {
            queryParameters['tagId'] = requestParameters.tagId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/tags`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tagsDelete(requestParameters: TagsDeleteRequest): Promise<void> {
        await this.tagsDeleteRaw(requestParameters);
    }

    /**
     */
    async tagsPostRaw(requestParameters: TagsPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTagModelToJSON(requestParameters.addTagModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tagsPost(requestParameters: TagsPostRequest): Promise<void> {
        await this.tagsPostRaw(requestParameters);
    }

}
