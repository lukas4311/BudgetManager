/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    CurrencySymbol,
    CurrencySymbolFromJSON,
    CurrencySymbolToJSON,
} from '../models';

/**
 * CurrencyApi - interface
 * 
 * @export
 * @interface CurrencyApiInterface
 */
export interface CurrencyApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApiInterface
     */
    currencyAllGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CurrencySymbol>>>;

    /**
     */
    currencyAllGet(initOverrides?: RequestInit): Promise<Array<CurrencySymbol>>;

}

/**
 * 
 */
export class CurrencyApi extends runtime.BaseAPI implements CurrencyApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async currencyAllGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CurrencySymbol>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/currency/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CurrencySymbolFromJSON));
    }

    /**
     */
    async currencyAllGet(initOverrides?: RequestInit): Promise<Array<CurrencySymbol>> {
        const response = await this.currencyAllGetRaw(initOverrides);
        return await response.value();
    }

}
