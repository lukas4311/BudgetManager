/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    PaymentCategoryModel,
    PaymentCategoryModelFromJSON,
    PaymentCategoryModelToJSON,
    PaymentModel,
    PaymentModelFromJSON,
    PaymentModelToJSON,
    PaymentTypeModel,
    PaymentTypeModelFromJSON,
    PaymentTypeModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface V1PaymentsCloneIdPostRequest {
    id: number;
}

export interface V1PaymentsDeleteRequest {
    id?: number;
}

export interface V1PaymentsDetailGetRequest {
    id?: number;
}

export interface V1PaymentsGetRequest {
    fromDate?: Date;
    toDate?: Date;
    bankAccountId?: number;
}

export interface V1PaymentsPaymentIdTagTagIdDeleteRequest {
    tagId: number;
    paymentId: number;
}

export interface V1PaymentsPostRequest {
    paymentModel?: PaymentModel;
}

export interface V1PaymentsPutRequest {
    paymentModel?: PaymentModel;
}

/**
 * PaymentApi - interface
 * 
 * @export
 * @interface PaymentApiInterface
 */
export interface PaymentApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    v1PaymentsCategoriesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentCategoryModel>>>;

    /**
     */
    v1PaymentsCategoriesGet(initOverrides?: RequestInit): Promise<Array<PaymentCategoryModel>>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    v1PaymentsCloneIdPostRaw(requestParameters: V1PaymentsCloneIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1PaymentsCloneIdPost(requestParameters: V1PaymentsCloneIdPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    v1PaymentsDeleteRaw(requestParameters: V1PaymentsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1PaymentsDelete(requestParameters: V1PaymentsDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    v1PaymentsDetailGetRaw(requestParameters: V1PaymentsDetailGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaymentModel>>;

    /**
     */
    v1PaymentsDetailGet(requestParameters: V1PaymentsDetailGetRequest, initOverrides?: RequestInit): Promise<PaymentModel>;

    /**
     * 
     * @param {Date} [fromDate] 
     * @param {Date} [toDate] 
     * @param {number} [bankAccountId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    v1PaymentsGetRaw(requestParameters: V1PaymentsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentModel>>>;

    /**
     */
    v1PaymentsGet(requestParameters: V1PaymentsGetRequest, initOverrides?: RequestInit): Promise<Array<PaymentModel>>;

    /**
     * 
     * @param {number} tagId 
     * @param {number} paymentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    v1PaymentsPaymentIdTagTagIdDeleteRaw(requestParameters: V1PaymentsPaymentIdTagTagIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1PaymentsPaymentIdTagTagIdDelete(requestParameters: V1PaymentsPaymentIdTagTagIdDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {PaymentModel} [paymentModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    v1PaymentsPostRaw(requestParameters: V1PaymentsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1PaymentsPost(requestParameters: V1PaymentsPostRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {PaymentModel} [paymentModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    v1PaymentsPutRaw(requestParameters: V1PaymentsPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    v1PaymentsPut(requestParameters: V1PaymentsPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    v1PaymentsTypesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentTypeModel>>>;

    /**
     */
    v1PaymentsTypesGet(initOverrides?: RequestInit): Promise<Array<PaymentTypeModel>>;

}

/**
 * 
 */
export class PaymentApi extends runtime.BaseAPI implements PaymentApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async v1PaymentsCategoriesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentCategoryModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/payments/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentCategoryModelFromJSON));
    }

    /**
     */
    async v1PaymentsCategoriesGet(initOverrides?: RequestInit): Promise<Array<PaymentCategoryModel>> {
        const response = await this.v1PaymentsCategoriesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async v1PaymentsCloneIdPostRaw(requestParameters: V1PaymentsCloneIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1PaymentsCloneIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/payments/clone/{id}`.replace(`{${"id"}}`, this.processPathParam(requestParameters.id)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1PaymentsCloneIdPost(requestParameters: V1PaymentsCloneIdPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1PaymentsCloneIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1PaymentsDeleteRaw(requestParameters: V1PaymentsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/payments`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1PaymentsDelete(requestParameters: V1PaymentsDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1PaymentsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1PaymentsDetailGetRaw(requestParameters: V1PaymentsDetailGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaymentModel>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/payments/detail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentModelFromJSON(jsonValue));
    }

    /**
     */
    async v1PaymentsDetailGet(requestParameters: V1PaymentsDetailGetRequest, initOverrides?: RequestInit): Promise<PaymentModel> {
        const response = await this.v1PaymentsDetailGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1PaymentsGetRaw(requestParameters: V1PaymentsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentModel>>> {
        const queryParameters: any = {};

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString();
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = (requestParameters.toDate as any).toISOString();
        }

        if (requestParameters.bankAccountId !== undefined) {
            queryParameters['bankAccountId'] = requestParameters.bankAccountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/payments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentModelFromJSON));
    }

    /**
     */
    async v1PaymentsGet(requestParameters: V1PaymentsGetRequest, initOverrides?: RequestInit): Promise<Array<PaymentModel>> {
        const response = await this.v1PaymentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1PaymentsPaymentIdTagTagIdDeleteRaw(requestParameters: V1PaymentsPaymentIdTagTagIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
            throw new runtime.RequiredError('tagId','Required parameter requestParameters.tagId was null or undefined when calling v1PaymentsPaymentIdTagTagIdDelete.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling v1PaymentsPaymentIdTagTagIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/payments/{paymentId}/tag/{tagId}`.replace(`{${"tagId"}}`, this.processPathParam(requestParameters.tagId)).replace(`{${"paymentId"}}`, this.processPathParam(requestParameters.paymentId)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1PaymentsPaymentIdTagTagIdDelete(requestParameters: V1PaymentsPaymentIdTagTagIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1PaymentsPaymentIdTagTagIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1PaymentsPostRaw(requestParameters: V1PaymentsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentModelToJSON(requestParameters.paymentModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1PaymentsPost(requestParameters: V1PaymentsPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1PaymentsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1PaymentsPutRaw(requestParameters: V1PaymentsPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; ver=1.0';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/payments`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentModelToJSON(requestParameters.paymentModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1PaymentsPut(requestParameters: V1PaymentsPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.v1PaymentsPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1PaymentsTypesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentTypeModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/payments/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentTypeModelFromJSON));
    }

    /**
     */
    async v1PaymentsTypesGet(initOverrides?: RequestInit): Promise<Array<PaymentTypeModel>> {
        const response = await this.v1PaymentsTypesGetRaw(initOverrides);
        return await response.value();
    }

}
