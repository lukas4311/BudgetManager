/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.AuthApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';
import {
    AuthResponseModel,
    AuthResponseModelFromJSON,
    AuthResponseModelToJSON,
    TokenModel,
    TokenModelFromJSON,
    TokenModelToJSON,
    UserIdentification,
    UserIdentificationFromJSON,
    UserIdentificationToJSON,
    UserModel,
    UserModelFromJSON,
    UserModelToJSON,
} from '../models';

export interface AuthAuthenticatePostRequest {
    userModel?: UserModel;
}

export interface AuthTokenDataGetRequest {
    token?: string | null;
}

export interface AuthValidatePostRequest {
    tokenModel?: TokenModel;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * 
     * @param {UserModel} [userModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authAuthenticatePostRaw(requestParameters: AuthAuthenticatePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AuthResponseModel>>;

    /**
     */
    authAuthenticatePost(requestParameters: AuthAuthenticatePostRequest, initOverrides?: RequestInit): Promise<AuthResponseModel>;

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authTokenDataGetRaw(requestParameters: AuthTokenDataGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserIdentification>>;

    /**
     */
    authTokenDataGet(requestParameters: AuthTokenDataGetRequest, initOverrides?: RequestInit): Promise<UserIdentification>;

    /**
     * 
     * @param {TokenModel} [tokenModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authValidatePostRaw(requestParameters: AuthValidatePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>>;

    /**
     */
    authValidatePost(requestParameters: AuthValidatePostRequest, initOverrides?: RequestInit): Promise<boolean>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async authAuthenticatePostRaw(requestParameters: AuthAuthenticatePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AuthResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserModelToJSON(requestParameters.userModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async authAuthenticatePost(requestParameters: AuthAuthenticatePostRequest, initOverrides?: RequestInit): Promise<AuthResponseModel> {
        const response = await this.authAuthenticatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authTokenDataGetRaw(requestParameters: AuthTokenDataGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserIdentification>> {
        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/tokenData`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserIdentificationFromJSON(jsonValue));
    }

    /**
     */
    async authTokenDataGet(requestParameters: AuthTokenDataGetRequest, initOverrides?: RequestInit): Promise<UserIdentification> {
        const response = await this.authTokenDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authValidatePostRaw(requestParameters: AuthValidatePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenModelToJSON(requestParameters.tokenModel),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async authValidatePost(requestParameters: AuthValidatePostRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.authValidatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
