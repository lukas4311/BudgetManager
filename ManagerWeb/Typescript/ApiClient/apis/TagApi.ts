/* tslint:disable */
/* eslint-disable */
/**
 * ManagerWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddTagModel,
    AddTagModelFromJSON,
    AddTagModelToJSON,
    TagModel,
    TagModelFromJSON,
    TagModelToJSON,
} from '../models';

export interface TagDeleteRequest {
    tagId?: number;
}

export interface TagPaymentDeleteRequest {
    paymentId?: number;
    body?: number;
}

export interface TagPostRequest {
    addTagModel?: AddTagModel;
}

/**
 * TagApi - interface
 * 
 * @export
 * @interface TagApiInterface
 */
export interface TagApiInterface {
    /**
     * 
     * @param {number} [tagId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    tagDeleteRaw(requestParameters: TagDeleteRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    tagDelete(requestParameters: TagDeleteRequest): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    tagPaymentAllGetRaw(): Promise<runtime.ApiResponse<Array<TagModel>>>;

    /**
     */
    tagPaymentAllGet(): Promise<Array<TagModel>>;

    /**
     * 
     * @param {number} [paymentId] 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    tagPaymentDeleteRaw(requestParameters: TagPaymentDeleteRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    tagPaymentDelete(requestParameters: TagPaymentDeleteRequest): Promise<void>;

    /**
     * 
     * @param {AddTagModel} [addTagModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    tagPostRaw(requestParameters: TagPostRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    tagPost(requestParameters: TagPostRequest): Promise<void>;

}

/**
 * 
 */
export class TagApi extends runtime.BaseAPI implements TagApiInterface {

    /**
     */
    async tagDeleteRaw(requestParameters: TagDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.tagId !== undefined) {
            queryParameters['tagId'] = requestParameters.tagId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tag`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tagDelete(requestParameters: TagDeleteRequest): Promise<void> {
        await this.tagDeleteRaw(requestParameters);
    }

    /**
     */
    async tagPaymentAllGetRaw(): Promise<runtime.ApiResponse<Array<TagModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tag/payment/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagModelFromJSON));
    }

    /**
     */
    async tagPaymentAllGet(): Promise<Array<TagModel>> {
        const response = await this.tagPaymentAllGetRaw();
        return await response.value();
    }

    /**
     */
    async tagPaymentDeleteRaw(requestParameters: TagPaymentDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.paymentId !== undefined) {
            queryParameters['paymentId'] = requestParameters.paymentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tag/payment`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tagPaymentDelete(requestParameters: TagPaymentDeleteRequest): Promise<void> {
        await this.tagPaymentDeleteRaw(requestParameters);
    }

    /**
     */
    async tagPostRaw(requestParameters: TagPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTagModelToJSON(requestParameters.addTagModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tagPost(requestParameters: TagPostRequest): Promise<void> {
        await this.tagPostRaw(requestParameters);
    }

}
