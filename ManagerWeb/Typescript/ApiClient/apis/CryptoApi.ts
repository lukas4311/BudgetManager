/* tslint:disable */
/* eslint-disable */
/**
 * ManagerWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TradeHistory,
    TradeHistoryFromJSON,
    TradeHistoryToJSON,
} from '../models';

export interface CryptoGetGetRequest {
    id?: number;
}

/**
 * CryptoApi - interface
 * 
 * @export
 * @interface CryptoApiInterface
 */
export interface CryptoApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    cryptoGetAllGetRaw(): Promise<runtime.ApiResponse<Array<TradeHistory>>>;

    /**
     */
    cryptoGetAllGet(): Promise<Array<TradeHistory>>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoApiInterface
     */
    cryptoGetGetRaw(requestParameters: CryptoGetGetRequest): Promise<runtime.ApiResponse<TradeHistory>>;

    /**
     */
    cryptoGetGet(requestParameters: CryptoGetGetRequest): Promise<TradeHistory>;

}

/**
 * 
 */
export class CryptoApi extends runtime.BaseAPI implements CryptoApiInterface {

    /**
     */
    async cryptoGetAllGetRaw(): Promise<runtime.ApiResponse<Array<TradeHistory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/crypto/getAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradeHistoryFromJSON));
    }

    /**
     */
    async cryptoGetAllGet(): Promise<Array<TradeHistory>> {
        const response = await this.cryptoGetAllGetRaw();
        return await response.value();
    }

    /**
     */
    async cryptoGetGetRaw(requestParameters: CryptoGetGetRequest): Promise<runtime.ApiResponse<TradeHistory>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/crypto/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeHistoryFromJSON(jsonValue));
    }

    /**
     */
    async cryptoGetGet(requestParameters: CryptoGetGetRequest): Promise<TradeHistory> {
        const response = await this.cryptoGetGetRaw(requestParameters);
        return await response.value();
    }

}
