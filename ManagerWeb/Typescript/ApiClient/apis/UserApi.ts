/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.ManagerWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface UserAuthenticatePostRequest {
    login: string;
    password: string;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userAuthenticateGetRaw(): Promise<runtime.ApiResponse<void>>;

    /**
     */
    userAuthenticateGet(): Promise<void>;

    /**
     * 
     * @param {string} login 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userAuthenticatePostRaw(requestParameters: UserAuthenticatePostRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    userAuthenticatePost(requestParameters: UserAuthenticatePostRequest): Promise<void>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     */
    async userAuthenticateGetRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/User/authenticate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userAuthenticateGet(): Promise<void> {
        await this.userAuthenticateGetRaw();
    }

    /**
     */
    async userAuthenticatePostRaw(requestParameters: UserAuthenticatePostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling userAuthenticatePost.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling userAuthenticatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.login !== undefined) {
            formParams.append('Login', requestParameters.login as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('Password', requestParameters.password as any);
        }

        const response = await this.request({
            path: `/User/authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userAuthenticatePost(requestParameters: UserAuthenticatePostRequest): Promise<void> {
        await this.userAuthenticatePostRaw(requestParameters);
    }

}
