/* tslint:disable */
/* eslint-disable */
/**
 * ManagerWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaymentCategoryModel,
    PaymentCategoryModelFromJSON,
    PaymentCategoryModelToJSON,
    PaymentTypeModel,
    PaymentTypeModelFromJSON,
    PaymentTypeModelToJSON,
    PaymentViewModel,
    PaymentViewModelFromJSON,
    PaymentViewModelToJSON,
} from '../models';

export interface PaymentDataGetRequest {
    fromDate?: Date | null;
    toDate?: Date | null;
    bankAccountId?: number | null;
}

export interface PaymentDetailGetRequest {
    id?: number;
}

export interface PaymentPostRequest {
    paymentViewModel?: PaymentViewModel;
}

export interface PaymentPutRequest {
    paymentViewModel?: PaymentViewModel;
}

/**
 * PaymentApi - interface
 * 
 * @export
 * @interface PaymentApiInterface
 */
export interface PaymentApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    paymentBankAccountsGetRaw(): Promise<runtime.ApiResponse<void>>;

    /**
     */
    paymentBankAccountsGet(): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    paymentCategoriesGetRaw(): Promise<runtime.ApiResponse<Array<PaymentCategoryModel>>>;

    /**
     */
    paymentCategoriesGet(): Promise<Array<PaymentCategoryModel>>;

    /**
     * 
     * @param {Date} [fromDate] 
     * @param {Date} [toDate] 
     * @param {number} [bankAccountId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    paymentDataGetRaw(requestParameters: PaymentDataGetRequest): Promise<runtime.ApiResponse<Array<PaymentViewModel>>>;

    /**
     */
    paymentDataGet(requestParameters: PaymentDataGetRequest): Promise<Array<PaymentViewModel>>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    paymentDetailGetRaw(requestParameters: PaymentDetailGetRequest): Promise<runtime.ApiResponse<PaymentViewModel>>;

    /**
     */
    paymentDetailGet(requestParameters: PaymentDetailGetRequest): Promise<PaymentViewModel>;

    /**
     * 
     * @param {PaymentViewModel} [paymentViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    paymentPostRaw(requestParameters: PaymentPostRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    paymentPost(requestParameters: PaymentPostRequest): Promise<void>;

    /**
     * 
     * @param {PaymentViewModel} [paymentViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    paymentPutRaw(requestParameters: PaymentPutRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    paymentPut(requestParameters: PaymentPutRequest): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiInterface
     */
    paymentTypesGetRaw(): Promise<runtime.ApiResponse<Array<PaymentTypeModel>>>;

    /**
     */
    paymentTypesGet(): Promise<Array<PaymentTypeModel>>;

}

/**
 * 
 */
export class PaymentApi extends runtime.BaseAPI implements PaymentApiInterface {

    /**
     */
    async paymentBankAccountsGetRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payment/bankAccounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async paymentBankAccountsGet(): Promise<void> {
        await this.paymentBankAccountsGetRaw();
    }

    /**
     */
    async paymentCategoriesGetRaw(): Promise<runtime.ApiResponse<Array<PaymentCategoryModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payment/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentCategoryModelFromJSON));
    }

    /**
     */
    async paymentCategoriesGet(): Promise<Array<PaymentCategoryModel>> {
        const response = await this.paymentCategoriesGetRaw();
        return await response.value();
    }

    /**
     */
    async paymentDataGetRaw(requestParameters: PaymentDataGetRequest): Promise<runtime.ApiResponse<Array<PaymentViewModel>>> {
        const queryParameters: any = {};

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString();
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = (requestParameters.toDate as any).toISOString();
        }

        if (requestParameters.bankAccountId !== undefined) {
            queryParameters['bankAccountId'] = requestParameters.bankAccountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payment/data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentViewModelFromJSON));
    }

    /**
     */
    async paymentDataGet(requestParameters: PaymentDataGetRequest): Promise<Array<PaymentViewModel>> {
        const response = await this.paymentDataGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async paymentDetailGetRaw(requestParameters: PaymentDetailGetRequest): Promise<runtime.ApiResponse<PaymentViewModel>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payment/detail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentViewModelFromJSON(jsonValue));
    }

    /**
     */
    async paymentDetailGet(requestParameters: PaymentDetailGetRequest): Promise<PaymentViewModel> {
        const response = await this.paymentDetailGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async paymentPostRaw(requestParameters: PaymentPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentViewModelToJSON(requestParameters.paymentViewModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async paymentPost(requestParameters: PaymentPostRequest): Promise<void> {
        await this.paymentPostRaw(requestParameters);
    }

    /**
     */
    async paymentPutRaw(requestParameters: PaymentPutRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payment`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentViewModelToJSON(requestParameters.paymentViewModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async paymentPut(requestParameters: PaymentPutRequest): Promise<void> {
        await this.paymentPutRaw(requestParameters);
    }

    /**
     */
    async paymentTypesGetRaw(): Promise<runtime.ApiResponse<Array<PaymentTypeModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payment/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentTypeModelFromJSON));
    }

    /**
     */
    async paymentTypesGet(): Promise<Array<PaymentTypeModel>> {
        const response = await this.paymentTypesGetRaw();
        return await response.value();
    }

}
