/* tslint:disable */
/* eslint-disable */
/**
 * ManagerWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BudgetModel,
    BudgetModelFromJSON,
    BudgetModelToJSON,
} from '../models';

export interface BudgetAddPostRequest {
    budgetModel?: BudgetModel;
}

export interface BudgetDeleteDeleteRequest {
    body?: number;
}

export interface BudgetGetGetRequest {
    id?: number;
}

export interface BudgetUpdatePutRequest {
    budgetModel?: BudgetModel;
}

/**
 * BudgetApi - interface
 * 
 * @export
 * @interface BudgetApiInterface
 */
export interface BudgetApiInterface {
    /**
     * 
     * @param {BudgetModel} [budgetModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetApiInterface
     */
    budgetAddPostRaw(requestParameters: BudgetAddPostRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    budgetAddPost(requestParameters: BudgetAddPostRequest): Promise<void>;

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetApiInterface
     */
    budgetDeleteDeleteRaw(requestParameters: BudgetDeleteDeleteRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    budgetDeleteDelete(requestParameters: BudgetDeleteDeleteRequest): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetApiInterface
     */
    budgetGetAllGetRaw(): Promise<runtime.ApiResponse<Array<BudgetModel>>>;

    /**
     */
    budgetGetAllGet(): Promise<Array<BudgetModel>>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetApiInterface
     */
    budgetGetGetRaw(requestParameters: BudgetGetGetRequest): Promise<runtime.ApiResponse<BudgetModel>>;

    /**
     */
    budgetGetGet(requestParameters: BudgetGetGetRequest): Promise<BudgetModel>;

    /**
     * 
     * @param {BudgetModel} [budgetModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetApiInterface
     */
    budgetUpdatePutRaw(requestParameters: BudgetUpdatePutRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    budgetUpdatePut(requestParameters: BudgetUpdatePutRequest): Promise<void>;

}

/**
 * 
 */
export class BudgetApi extends runtime.BaseAPI implements BudgetApiInterface {

    /**
     */
    async budgetAddPostRaw(requestParameters: BudgetAddPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/budget/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BudgetModelToJSON(requestParameters.budgetModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async budgetAddPost(requestParameters: BudgetAddPostRequest): Promise<void> {
        await this.budgetAddPostRaw(requestParameters);
    }

    /**
     */
    async budgetDeleteDeleteRaw(requestParameters: BudgetDeleteDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/budget/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async budgetDeleteDelete(requestParameters: BudgetDeleteDeleteRequest): Promise<void> {
        await this.budgetDeleteDeleteRaw(requestParameters);
    }

    /**
     */
    async budgetGetAllGetRaw(): Promise<runtime.ApiResponse<Array<BudgetModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/budget/getAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BudgetModelFromJSON));
    }

    /**
     */
    async budgetGetAllGet(): Promise<Array<BudgetModel>> {
        const response = await this.budgetGetAllGetRaw();
        return await response.value();
    }

    /**
     */
    async budgetGetGetRaw(requestParameters: BudgetGetGetRequest): Promise<runtime.ApiResponse<BudgetModel>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/budget/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetModelFromJSON(jsonValue));
    }

    /**
     */
    async budgetGetGet(requestParameters: BudgetGetGetRequest): Promise<BudgetModel> {
        const response = await this.budgetGetGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async budgetUpdatePutRaw(requestParameters: BudgetUpdatePutRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/budget/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BudgetModelToJSON(requestParameters.budgetModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async budgetUpdatePut(requestParameters: BudgetUpdatePutRequest): Promise<void> {
        await this.budgetUpdatePutRaw(requestParameters);
    }

}
