/* tslint:disable */
/* eslint-disable */
/**
 * BudgetManager.FinancialApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../runtime';

export interface GetCryptoPriceDataRequest {
    ticker?: string;
}

export interface GetCryptoPriceDataAtDateRequest {
    date: Date;
    ticker?: string;
}

export interface GetCryptoPriceDataFromDateRequest {
    from: Date;
    ticker?: string;
}

/**
 * CryptoEndpointsApi - interface
 * 
 * @export
 * @interface CryptoEndpointsApiInterface
 */
export interface CryptoEndpointsApiInterface {
    /**
     * 
     * @param {string} [ticker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoEndpointsApiInterface
     */
    getCryptoPriceDataRaw(requestParameters: GetCryptoPriceDataRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    getCryptoPriceData(requestParameters: GetCryptoPriceDataRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {Date} date 
     * @param {string} [ticker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoEndpointsApiInterface
     */
    getCryptoPriceDataAtDateRaw(requestParameters: GetCryptoPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    getCryptoPriceDataAtDate(requestParameters: GetCryptoPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @param {Date} from 
     * @param {string} [ticker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoEndpointsApiInterface
     */
    getCryptoPriceDataFromDateRaw(requestParameters: GetCryptoPriceDataFromDateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    getCryptoPriceDataFromDate(requestParameters: GetCryptoPriceDataFromDateRequest, initOverrides?: RequestInit): Promise<void>;

}

/**
 * 
 */
export class CryptoEndpointsApi extends runtime.BaseAPI implements CryptoEndpointsApiInterface {
    processPathParam(param: any): string {
        if (param instanceof Date)
            return encodeURIComponent(String(param.toISOString()));

        return encodeURIComponent(String(param));
    }

    /**
     */
    async getCryptoPriceDataRaw(requestParameters: GetCryptoPriceDataRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/crypto/{ticker}/price/all`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getCryptoPriceData(requestParameters: GetCryptoPriceDataRequest, initOverrides?: RequestInit): Promise<void> {
        await this.getCryptoPriceDataRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getCryptoPriceDataAtDateRaw(requestParameters: GetCryptoPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling getCryptoPriceDataAtDate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/crypto/{ticker}/price/{date}`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)).replace(`{${"date"}}`, this.processPathParam(requestParameters.date)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getCryptoPriceDataAtDate(requestParameters: GetCryptoPriceDataAtDateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.getCryptoPriceDataAtDateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getCryptoPriceDataFromDateRaw(requestParameters: GetCryptoPriceDataFromDateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getCryptoPriceDataFromDate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/crypto/{ticker}/priceFrom/{from}`.replace(`{${"ticker"}}`, this.processPathParam(requestParameters.ticker)).replace(`{${"from"}}`, this.processPathParam(requestParameters.from)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getCryptoPriceDataFromDate(requestParameters: GetCryptoPriceDataFromDateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.getCryptoPriceDataFromDateRaw(requestParameters, initOverrides);
    }

}
